import React, { useEffect, useRef, useState } from 'react';
import mapboxgl from 'mapbox-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import './MapboxMap.css';

interface MapboxMapProps {
  className?: string;
  style?: React.CSSProperties;
  center?: [number, number];
  zoom?: number;
  onMapLoad?: (map: mapboxgl.Map) => void;
  showControls?: boolean;
  customStyle?: string | mapboxgl.Style;
}

const MapboxMap: React.FC<MapboxMapProps> = ({
  className = '',
  style = {},
  center = [37.6176, 55.7558], // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  zoom = 10,
  onMapLoad,
  showControls = true,
  customStyle
}) => {
  const mapContainer = useRef<HTMLDivElement>(null);
  const map = useRef<mapboxgl.Map | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [userLocation, setUserLocation] = useState<[number, number] | null>(null);
  const [locationStatus, setLocationStatus] = useState<'loading' | 'success' | 'error' | 'denied'>('loading');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserLocation = (): Promise<[number, number]> => {
    return new Promise((resolve, reject) => {
      if (!navigator.geolocation) {
        reject(new Error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º'));
        return;
      }

      console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é...');
      console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏:', {
        enableHighAccuracy: true,
        timeout: 15000,
        maximumAge: 0
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
      if ('permissions' in navigator) {
        navigator.permissions.query({ name: 'geolocation' as PermissionName })
          .then((result) => {
            console.log('–°—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', result.state);
            if (result.state === 'denied') {
              console.warn('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            }
          })
          .catch((err) => {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:', err);
          });
      }

      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { longitude, latitude, accuracy } = position.coords;
          console.log('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', {
            longitude,
            latitude,
            accuracy: `${accuracy}–º`,
            timestamp: new Date(position.timestamp).toLocaleString()
          });
          resolve([longitude, latitude]);
        },
        (error) => {
          let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏';
          switch (error.code) {
            case error.PERMISSION_DENIED:
              errorMessage = '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º';
              break;
            case error.POSITION_UNAVAILABLE:
              errorMessage = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
              break;
            case error.TIMEOUT:
              errorMessage = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ';
              break;
          }
          console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', errorMessage);
          console.warn('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            code: error.code,
            message: error.message,
            timestamp: new Date().toLocaleString()
          });
          reject(error);
        },
        {
          enableHighAccuracy: true,
          timeout: 15000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 15 —Å–µ–∫—É–Ω–¥
          maximumAge: 0 // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
      );
    });
  };

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const token = process.env.REACT_APP_MAPBOX_TOKEN || 'pk.eyJ1IjoiYWxleGN1Ym9yIiwiYSI6ImNtZ2MyendmYTE2NnIya3IwaWdjcTdwd20ifQ.lHoZI2LuqkukgCq6i7PupQ';
    
    console.log('üó∫Ô∏è MapboxMap: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã');
    console.log('üó∫Ô∏è MapboxMap: –¢–æ–∫–µ–Ω:', token ? `${token.substring(0, 20)}...` : '–ù–ï –ù–ê–ô–î–ï–ù');
    console.log('üó∫Ô∏è MapboxMap: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:', mapContainer.current ? '–ù–ê–ô–î–ï–ù' : '–ù–ï –ù–ê–ô–î–ï–ù');
    
    if (!mapContainer.current) {
      console.error('üó∫Ô∏è MapboxMap: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserLocation()
      .then((location) => {
        setUserLocation(location);
        setLocationStatus('success');
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        map.current = new mapboxgl.Map({
          container: mapContainer.current!,
          accessToken: token,
          style: customStyle || 'mapbox://styles/mapbox/streets-v12',
          center: location,
          zoom: 15, // –ë–ª–∏–∂–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          attributionControl: true
        });
        initializeMap();
      })
      .catch((error) => {
        // –ï—Å–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        setLocationStatus('error');
        console.log('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ú–æ—Å–∫–≤–∞)');
        map.current = new mapboxgl.Map({
          container: mapContainer.current!,
          accessToken: token,
          style: customStyle || 'mapbox://styles/mapbox/streets-v12',
          center: center,
          zoom: zoom,
          attributionControl: true
        });
        initializeMap();
      });
  }, []);

  const initializeMap = () => {
    console.log('üó∫Ô∏è MapboxMap: initializeMap –≤—ã–∑–≤–∞–Ω');
    if (!map.current) {
      console.error('üó∫Ô∏è MapboxMap: map.current –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ initializeMap!');
      return;
    }

    console.log('üó∫Ô∏è MapboxMap: –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    map.current.on('load', () => {
      console.log('üó∫Ô∏è MapboxMap: –ö–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      
      setIsLoading(false);
      if (onMapLoad) {
        onMapLoad(map.current!);
      }
    });

    map.current.on('error', (e) => {
      console.error('üó∫Ô∏è MapboxMap: –û—à–∏–±–∫–∞ –∫–∞—Ä—Ç—ã:', e);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã');
      setIsLoading(false);
    });
  };

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (map.current) {
        map.current.remove();
      }
    };
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∏ –∑—É–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–æ–≤
  useEffect(() => {
    if (map.current) {
      map.current.setCenter(center);
      map.current.setZoom(zoom);
    }
  }, [center, zoom]);


  console.log('üó∫Ô∏è MapboxMap: –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç', { isLoading, error, userLocation, locationStatus });

  return (
    <div className={`mapbox-map-container ${className}`} style={style}>
      {error && (
        <div className="mapbox-error">
          <p>{error}</p>
        </div>
      )}
      
      <div 
        ref={mapContainer} 
        className="mapbox-map"
        style={{ 
          width: '100%', 
          height: '100%'
        }}
      />
    </div>
  );
};

export default MapboxMap;
