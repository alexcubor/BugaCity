import React, { useEffect, useRef, useState } from 'react';
import mapboxgl from 'mapbox-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import './MapboxMap.css';

interface MapboxMapProps {
  className?: string;
  style?: React.CSSProperties;
  center?: [number, number];
  zoom?: number;
  onMapLoad?: (map: mapboxgl.Map) => void;
  showControls?: boolean;
  customStyle?: string | mapboxgl.Style;
}

const MapboxMap: React.FC<MapboxMapProps> = ({
  className = '',
  style = {},
  center = [37.6176, 55.7558], // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  zoom = 10,
  onMapLoad,
  showControls = true,
  customStyle
}) => {
  const mapContainer = useRef<HTMLDivElement>(null);
  const map = useRef<mapboxgl.Map | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [userLocation, setUserLocation] = useState<[number, number] | null>(null);
  const [locationStatus, setLocationStatus] = useState<'loading' | 'success' | 'error' | 'denied'>('loading');
  const [craneAdded, setCraneAdded] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞ –∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ Mapbox GL JS API
  const addCraneMarker = (coordinates: [number, number]) => {
    if (!map.current || craneAdded) return;

    console.log('üèóÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –∫—Ä–∞–Ω–∞ —á–µ—Ä–µ–∑ Mapbox GL JS API:', coordinates);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∞–Ω–∞
    map.current.loadImage('/images/construction_crane.png', (error, image) => {
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—Ä–∞–Ω–∞:', error);
        return;
      }

      console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', image);
      console.log('üìè –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', image ? `${image.width}x${image.height}` : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–∞—Ä—Ç—É
      if (image) {
        map.current!.addImage('crane-icon', image);
        console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞—Ä—Ç—É –∫–∞–∫ "crane-icon"');
      } else {
        console.error('‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
        return;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
      map.current!.addSource('crane-source', {
        type: 'geojson',
        data: {
          type: 'FeatureCollection',
          features: [
            {
              type: 'Feature',
              geometry: {
                type: 'Point',
                coordinates: coordinates
              },
              properties: {
                title: '–í–µ–¥—É—Ç—Å—è —Ä–∞–±–æ—Ç—ã',
                description: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'
              }
            }
          ]
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –∏–∫–æ–Ω–∫–∏ (–º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä)
      map.current!.addLayer({
        id: 'crane-icon-layer',
        type: 'symbol',
        source: 'crane-source',
        layout: {
          'icon-image': 'crane-icon',
          'icon-size': 0.3, // –ï—â–µ –º–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏
          'icon-allow-overlap': true,
          'icon-ignore-placement': true,
          'icon-anchor': 'left' // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
      map.current!.addSource('crane-title-source', {
        type: 'geojson',
        data: {
          type: 'FeatureCollection',
          features: [
            {
              type: 'Feature',
              geometry: {
                type: 'Point',
                coordinates: coordinates
              },
              properties: {
                title: '–í–µ–¥—É—Ç—Å—è —Ä–∞–±–æ—Ç—ã'
              }
            }
          ]
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞
      map.current!.addSource('crane-subtitle-source', {
        type: 'geojson',
        data: {
          type: 'FeatureCollection',
          features: [
            {
              type: 'Feature',
              geometry: {
                type: 'Point',
                coordinates: coordinates
              },
              properties: {}
            }
          ]
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–∫—Ä—É–ø–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
      map.current!.addLayer({
        id: 'crane-title-layer',
        type: 'symbol',
        source: 'crane-title-source',
        layout: {
          'text-field': '–í–µ–¥—É—Ç—Å—è —Ä–∞–±–æ—Ç—ã',
          'text-size': 40, // –í –¥–≤–∞ —Ä–∞–∑–∞ –∫—Ä—É–ø–Ω–µ–µ (20 * 2 = 40)
          'text-offset': [0.8, -0.8], // –û—Ç—Å—Ç—É–ø –æ—Ç –∏–∫–æ–Ω–∫–∏ –∏ –≤—ã—à–µ
          'text-anchor': 'left',
          'text-justify': 'left',
          'text-allow-overlap': true,
          'text-ignore-placement': true
        },
        paint: {
          'text-color': '#333',
          'text-halo-color': '#fff',
          'text-halo-width': 4 // –û–±–≤–æ–¥–∫–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞ (–æ–±—ã—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
      map.current!.addLayer({
        id: 'crane-subtitle-layer',
        type: 'symbol',
        source: 'crane-subtitle-source',
        layout: {
          'text-field': '–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!',
          'text-size': 16, // –û–±—ã—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
          'text-offset': [2.2, 1.8], // –û—Ç—Å—Ç—É–ø –æ—Ç –∏–∫–æ–Ω–∫–∏ –∏ –Ω–∏–∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
          'text-anchor': 'left',
          'text-justify': 'left',
          'text-allow-overlap': true,
          'text-ignore-placement': true
        },
        paint: {
          'text-color': '#1a1a1a', // –¢–µ–º–Ω—ã–π —Ü–≤–µ—Ç (90% —á–µ—Ä–Ω–æ–≥–æ)
          'text-halo-color': '#fff',
          'text-halo-width': 2 // –û–±–≤–æ–¥–∫–∞ –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞
        }
      });

      setCraneAdded(true);
      console.log('‚úÖ –ú–∞—Ä–∫–µ—Ä –∫—Ä–∞–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Mapbox GL JS API');
    });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserLocation = (): Promise<[number, number]> => {
    return new Promise((resolve, reject) => {
      if (!navigator.geolocation) {
        reject(new Error('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º'));
        return;
      }


      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
      if ('permissions' in navigator) {
        navigator.permissions.query({ name: 'geolocation' as PermissionName })
          .then((result) => {
            // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã
          })
          .catch((err) => {
            // –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
          });
      }

      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { longitude, latitude, accuracy } = position.coords;
          resolve([longitude, latitude]);
        },
        (error) => {
          let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏';
          switch (error.code) {
            case error.PERMISSION_DENIED:
              errorMessage = '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º';
              break;
            case error.POSITION_UNAVAILABLE:
              errorMessage = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
              break;
            case error.TIMEOUT:
              errorMessage = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ';
              break;
          }
          reject(error);
        },
        {
          enableHighAccuracy: true,
          timeout: 15000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 15 —Å–µ–∫—É–Ω–¥
          maximumAge: 0 // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }
      );
    });
  };

  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const token = process.env.REACT_APP_MAPBOX_TOKEN || 'pk.eyJ1IjoiYWxleGN1Ym9yIiwiYSI6ImNtZ2MyendmYTE2NnIya3IwaWdjcTdwd20ifQ.lHoZI2LuqkukgCq6i7PupQ';
    
    console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã Mapbox...');
    console.log('üîë –¢–æ–∫–µ–Ω:', token ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('üìç –¶–µ–Ω—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', center);
    console.log('üîç –ó—É–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', zoom);
    
    if (!mapContainer.current) {
      console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–∞
    if (map.current) {
      console.log('‚ö†Ô∏è –ö–∞—Ä—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ');
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserLocation()
      .then((location) => {
        setUserLocation(location);
        setLocationStatus('success');
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        map.current = new mapboxgl.Map({
          container: mapContainer.current!,
          accessToken: token,
          style: customStyle || 'mapbox://styles/mapbox/streets-v12',
          center: location,
          zoom: 15, // –ë–ª–∏–∂–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          attributionControl: false
        });
        initializeMap();
      })
      .catch((error) => {
        // –ï—Å–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        setLocationStatus('error');
        map.current = new mapboxgl.Map({
          container: mapContainer.current!,
          accessToken: token,
          style: customStyle || 'mapbox://styles/mapbox/streets-v12',
          center: center,
          zoom: zoom,
          attributionControl: false
        });
        initializeMap();
      });
  }, []); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–≤–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

  const initializeMap = () => {
    if (!map.current) {
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    map.current.on('load', () => {
      console.log('‚úÖ –ö–∞—Ä—Ç–∞ Mapbox –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
      
      // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–ª–æ–∏ (–Ω–∞–¥–ø–∏—Å–∏ –≥–æ—Ä–æ–¥–æ–≤, —É–ª–∏—Ü –∏ —Ç.–¥.)
      const style = map.current!.getStyle();
      if (style && style.layers) {
        style.layers.forEach((layer: any) => {
          if (layer.type === 'symbol' && layer.layout && layer.layout['text-field']) {
            // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–ª–æ–∏
            map.current!.setLayoutProperty(layer.id, 'visibility', 'none');
          }
        });
      }
      
      // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
      const bottomLeftContainer = document.querySelector('.mapboxgl-ctrl-bottom-left');
      if (bottomLeftContainer) {
        (bottomLeftContainer as HTMLElement).style.display = 'none';
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∫—Ä–∞–Ω–∞ –≤ –ª–µ–≤—É—é —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞
      const mapCenter = map.current!.getCenter();
      const mapBounds = map.current!.getBounds();
      
      if (!mapBounds) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã');
        return;
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ 25% –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è)
      const leftOffset = (mapBounds.getEast() - mapBounds.getWest()) * 0.25;
      const craneCoordinates: [number, number] = [mapBounds.getWest() + leftOffset, mapCenter.lat];
      
      console.log('üèóÔ∏è –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã:', mapCenter);
      console.log('üèóÔ∏è –ì—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã:', mapBounds);
      console.log('üèóÔ∏è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ (–ª–µ–≤–∞—è —á–∞—Å—Ç—å):', craneCoordinates);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —á–µ—Ä–µ–∑ Mapbox GL JS API
      addCraneMarker(craneCoordinates);
      
      setIsLoading(false);
      if (onMapLoad) {
        onMapLoad(map.current!);
      }
    });

    map.current.on('error', (e) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã Mapbox:', e);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã');
      setIsLoading(false);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    map.current.on('style.load', () => {
      console.log('üé® –°—Ç–∏–ª—å –∫–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω');
    });

  };

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (map.current) {
        // –£–¥–∞–ª—è–µ–º —Å–ª–æ–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫—Ä–∞–Ω–∞
        if (map.current.getLayer('crane-subtitle-layer')) {
          map.current.removeLayer('crane-subtitle-layer');
        }
        if (map.current.getLayer('crane-title-layer')) {
          map.current.removeLayer('crane-title-layer');
        }
        if (map.current.getLayer('crane-icon-layer')) {
          map.current.removeLayer('crane-icon-layer');
        }
        if (map.current.getSource('crane-subtitle-source')) {
          map.current.removeSource('crane-subtitle-source');
        }
        if (map.current.getSource('crane-title-source')) {
          map.current.removeSource('crane-title-source');
        }
        if (map.current.getSource('crane-source')) {
          map.current.removeSource('crane-source');
        }
        if (map.current.hasImage('crane-icon')) {
          map.current.removeImage('crane-icon');
        }
        map.current.remove();
      }
    };
  }, []);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä –∏ –∑—É–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–æ–≤
  useEffect(() => {
    if (map.current) {
      map.current.setCenter(center);
      map.current.setZoom(zoom);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º–∞—Ä–∫–µ—Ä–∞ –∫—Ä–∞–Ω–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—Ç—Ä–∞ (–≤—Å–µ–≥–¥–∞ –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏)
      if (craneAdded && map.current.getSource('crane-source') && map.current.getSource('crane-title-source') && map.current.getSource('crane-subtitle-source')) {
        const mapBounds = map.current.getBounds();
        if (!mapBounds) return;
        
        const leftOffset = (mapBounds.getEast() - mapBounds.getWest()) * 0.25;
        const craneCoordinates: [number, number] = [mapBounds.getWest() + leftOffset, center[1]];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–∫–æ–Ω–∫–∏
        const iconSource = map.current.getSource('crane-source') as mapboxgl.GeoJSONSource;
        iconSource.setData({
          type: 'FeatureCollection',
          features: [
            {
              type: 'Feature',
              geometry: {
                type: 'Point',
                coordinates: craneCoordinates
              },
              properties: {
                title: '–í–µ–¥—É—Ç—Å—è —Ä–∞–±–æ—Ç—ã',
                description: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'
              }
            }
          ]
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const titleSource = map.current.getSource('crane-title-source') as mapboxgl.GeoJSONSource;
        titleSource.setData({
          type: 'FeatureCollection',
          features: [
            {
              type: 'Feature',
              geometry: {
                type: 'Point',
                coordinates: craneCoordinates
              },
              properties: {
                title: '–í–µ–¥—É—Ç—Å—è —Ä–∞–±–æ—Ç—ã'
              }
            }
          ]
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞
        const subtitleSource = map.current.getSource('crane-subtitle-source') as mapboxgl.GeoJSONSource;
        subtitleSource.setData({
          type: 'FeatureCollection',
          features: [
            {
              type: 'Feature',
              geometry: {
                type: 'Point',
                coordinates: craneCoordinates
              },
              properties: {}
            }
          ]
        });
      }
    }
  }, [center, zoom, craneAdded]);



  return (
    <div className={`mapbox-map-container ${className}`} style={style}>
      {error && (
        <div className="mapbox-error">
          <p>{error}</p>
        </div>
      )}
      
      
      <div 
        ref={mapContainer} 
        className="mapbox-map"
        style={{ 
          width: '100%', 
          height: '100%'
        }}
      />
    </div>
  );
};

export default MapboxMap;
