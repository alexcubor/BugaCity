import React, { useState, useEffect } from 'react';
import RewardViewer from './RewardViewer';

interface UserMenuProps {
  onLogout: () => void;
}

interface User {
  id: string;
  username: string;
  name: string;
  glukocoins: number;
  rewards: string[];
}

function UserMenu({ onLogout }: UserMenuProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(false);
  const [selectedReward, setSelectedReward] = useState<string | null>(null);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é
    if (isOpen && !user) {
      loadUserData();
    }
  }, [isOpen]);

  const loadUserData = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem('token');
      if (!token) return;

      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - –¥–µ–∫–æ–¥–∏—Ä—É–µ–º JWT)
      const payload = JSON.parse(atob(token.split('.')[1]));
      const userId = payload.userId;

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const response = await fetch(`/api/users/${userId}`);
      if (response.ok) {
        const userData = await response.json();
        setUser(userData);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    } finally {
      setLoading(false);
    }
  };

  const toggleMenu = () => {
    setIsOpen(!isOpen);
  };

  const handleLogout = () => {
    onLogout();
    setIsOpen(false);
  };

  const handleRewardClick = (reward: string) => {
    setSelectedReward(reward);
  };

  const closeModal = () => {
    setSelectedReward(null);
  };

  const handleModalBackdropClick = (e: React.MouseEvent) => {
    if (e.target === e.currentTarget) {
      closeModal();
    }
  };

  return (
    <div>
      {/* –ö–Ω–æ–ø–∫–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º */}
      <button onClick={toggleMenu}>
        <div>
          <span>üë§</span> {/* –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞ */}
          <span>{user?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</span>
        </div>
      </button>

      {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é */}
      {isOpen && (
        <div>
          {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏ */}
          <div>
            <h4>–ú–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã:</h4>
            <div>
              {loading ? (
                <span>–ó–∞–≥—Ä—É–∑–∫–∞...</span>
              ) : user?.rewards && user.rewards.length > 0 ? (
                user.rewards.map((reward, index) => (
                  <span 
                    key={index} 
                    title={reward}
                    onClick={() => handleRewardClick(reward)}
                  >
                    <img 
                      src={`/models/rewards/${reward}/${reward}.png`}
                      alt={reward}
                      onError={(e) => {
                        // Fallback –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                        e.currentTarget.style.display = 'none';
                      }}
                    />
                  </span>
                ))
              ) : (
                <span>–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥</span>
              )}
            </div>
          </div>

          {/* –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π */}
          <ul>
            <li>
              <button onClick={handleLogout}>
                –í—ã–π—Ç–∏
              </button>
            </li>
          </ul>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å 3D Viewer */}
      {selectedReward && (
        <div onClick={handleModalBackdropClick}>
          <div>
            <button onClick={closeModal}>
              ‚úï
            </button>
            <h3>–ù–∞–≥—Ä–∞–¥–∞: {selectedReward}</h3>
            <RewardViewer 
              rewardId={selectedReward} 
              size="large" 
              autoRotate={true}
              showControls={true}
              onLoad={() => {}}
              onError={(error: string) => console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${selectedReward}:`, error)}
            />
          </div>
        </div>
      )}
    </div>
  );
}

export default UserMenu;
