import React, { useEffect, useRef, useState } from 'react';
import { 
  Engine, 
  Scene, 
  Vector3, 
  ArcRotateCamera,
  SceneLoader,
  Mesh,
  Color4,
  DynamicTexture,
  MeshBuilder,
  StandardMaterial,
  Color3,
  HDRCubeTexture,
  TransformNode
} from '@babylonjs/core';
import { GLTFFileLoader } from '@babylonjs/loaders';
import { RewardViewerComponentProps } from './types';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º GLTF –ª–æ–∞–¥–µ—Ä
SceneLoader.RegisterPlugin(new GLTFFileLoader());

const RewardViewerComponent: React.FC<RewardViewerComponentProps> = ({
  rewardId,
  size = 'medium',
  autoRotate = true,
  onLoad,
  onError,
  // –ù–æ–≤—ã–µ –ø—Ä–æ–ø—Å—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  isModal = false,
  onClose,
  modalTitle,
  userName,
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä–∞–¥–µ
  rewardName,
  rewardPrice,
  rewardDescription
}) => {
  console.log('üîç RewardViewer props:', { rewardId, rewardName, rewardPrice, rewardDescription });
  
  const [isLoading, setIsLoading] = useState(true);
  const [loadingError, setLoadingError] = useState<string | null>(null);
  
  // –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å URL –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞
  useEffect(() => {
    if (isModal && onClose) {
      // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      document.body.style.overflow = 'hidden';
      
      const handleUrlChange = () => {
        const urlParams = new URLSearchParams(window.location.search);
        const rewardParam = urlParams.get('reward');
        if (!rewardParam) {
          onClose();
        }
      };

      window.addEventListener('popstate', handleUrlChange);
      
      return () => {
        window.removeEventListener('popstate', handleUrlChange);
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        document.body.style.overflow = 'auto';
      };
    }
  }, [isModal, onClose]);

  const handleClose = () => {
    if (onClose) {
      // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ URL
      const url = new URL(window.location.href);
      url.searchParams.delete('reward');
      window.history.pushState({}, '', url);
      onClose();
    }
  };
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const sceneRef = useRef<Scene | null>(null);
  const engineRef = useRef<Engine | null>(null);

  // –ï—Å–ª–∏ —ç—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ onClose –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –Ω–∏—á–µ–≥–æ
  if (isModal && !onClose) return null;

  const handleBackdropClick = (e: React.MouseEvent) => {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ, –∫—Ä–æ–º–µ canvas
    const target = e.target as HTMLElement;
    if (!target.closest('canvas')) {
      handleClose();
    }
  };

  useEffect(() => {
    if (!canvasRef.current) return;

    // –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –∏ —Å—Ü–µ–Ω—É
    const canvas = canvasRef.current;
    const engine = new Engine(canvas, true);
    const scene = new Scene(engine);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
    scene.clearColor = new Color4(0, 0, 0, 0);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä canvas –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
    
    if (isModal) {
      // –í –º–æ–¥–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–µ–ª–∞–µ–º canvas –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º –Ω–∞ –æ—Å–Ω–æ–≤–µ viewport
      const viewportWidth = window.innerWidth;
      const viewportHeight = window.innerHeight;
      const minDimension = Math.min(viewportWidth, viewportHeight);
      
      // Canvas –∑–∞–Ω–∏–º–∞–µ—Ç 80% –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ viewport, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 300px –∏ –Ω–µ –±–æ–ª—å—à–µ 600px
      const canvasSize = Math.max(300, Math.min(600, Math.floor(minDimension * 0.8)));
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ canvas –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏ –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö DPI —ç–∫—Ä–∞–Ω–∞—Ö
      const pixelRatio = window.devicePixelRatio || 1;
      canvas.width = canvasSize * pixelRatio;
      canvas.height = canvasSize * pixelRatio;
      canvas.style.width = canvasSize + 'px';
      canvas.style.height = canvasSize + 'px';
    } else {
      // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –Ω–æ –¥–µ–ª–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º
      const container = canvas.parentElement;
      if (container) {
        const rect = container.getBoundingClientRect();
        const containerSize = Math.min(rect.width, rect.height);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ canvas –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏ –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö DPI —ç–∫—Ä–∞–Ω–∞—Ö
        const pixelRatio = window.devicePixelRatio || 1;
        canvas.width = containerSize * pixelRatio;
        canvas.height = containerSize * pixelRatio;
        canvas.style.width = containerSize + 'px';
        canvas.style.height = containerSize + 'px';
      }
    }
    
    engineRef.current = engine;
    sceneRef.current = scene;

    // –°–æ–∑–¥–∞–µ–º –∫–∞–º–µ—Ä—É
    const camera = new ArcRotateCamera(
      'camera',
      0, // alpha - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —É–≥–æ–ª (0¬∞) - –≤–∏–¥ —Å–∑–∞–¥–∏
      Math.PI / 2,   // beta - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —É–≥–æ–ª (90¬∞)
      5,             // radius - –Ω–∞—á–∏–Ω–∞–µ–º –∏–∑–¥–∞–ª–µ–∫–∞
      Vector3.Zero(),
      scene
    );
    
    camera.attachControl(canvas, true);
    
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –í–°–ï —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤—Ö–æ–¥—ã –∫–∞–º–µ—Ä—ã
    camera.inputs.removeByType("ArcRotateCameraMouseWheelInput");
    camera.inputs.removeByType("ArcRotateCameraPointersInput");
    camera.inputs.removeByType("ArcRotateCameraKeyboardMoveInput");
    camera.inputs.removeByType("ArcRotateCameraGamepadInput");
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∫–∞—Å–∞–Ω–∏—è
    let isDragging = false;
    let lastPointerX = 0;
    let lastPointerY = 0;
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–µ—Ä—Ü–∏–∏
    let velocityX = 0;
    let velocityY = 0;
    let lastTime = 0;
    let animationId: number | null = null;
    
    const handlePointerDown = (evt: PointerEvent) => {
      if (evt.pointerType === 'touch' && evt.pointerId !== undefined) {
        // –î–ª—è —Ç–∞—á-—É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω–æ—á–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ
        const touches = (evt.target as any).touches || [];
        if (touches.length > 1) {
          evt.preventDefault();
          return false;
        }
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–µ—Ä—Ü–∏—é –ø—Ä–∏ –Ω–æ–≤–æ–º –∫–∞—Å–∞–Ω–∏–∏
      if (animationId) {
        cancelAnimationFrame(animationId);
        animationId = null;
      }
      velocityX = 0;
      velocityY = 0;
      
      isDragging = true;
      lastPointerX = evt.clientX;
      lastPointerY = evt.clientY;
      lastTime = Date.now();
      evt.preventDefault();
      return false;
    };
    
    const handlePointerMove = (evt: PointerEvent) => {
      if (!isDragging) return;
      
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –º—É–ª—å—Ç–∏—Ç–∞—á –∂–µ—Å—Ç—ã
      if (evt.pointerType === 'touch') {
        const touches = (evt.target as any).touches || [];
        if (touches.length > 1) {
          isDragging = false;
          evt.preventDefault();
          return false;
        }
      }
      
      const currentTime = Date.now();
      const deltaTime = currentTime - lastTime;
      const deltaX = evt.clientX - lastPointerX;
      const deltaY = evt.clientY - lastPointerY;
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –∏–Ω–µ—Ä—Ü–∏–∏
      if (deltaTime > 0) {
        velocityX = deltaX / deltaTime;
        velocityY = deltaY / deltaTime;
      }
      
      // –¢–æ–ª—å–∫–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ –æ—Å–∏ Y (–≤–ª–µ–≤–æ-–≤–ø—Ä–∞–≤–æ), –±–ª–æ–∫–∏—Ä—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
      camera.alpha -= deltaX * 0.01; // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ (–≤–ª–µ–≤–æ-–≤–ø—Ä–∞–≤–æ)
      // camera.beta += deltaY * 0.01;  // –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
      
      
      lastPointerX = evt.clientX;
      lastPointerY = evt.clientY;
      lastTime = currentTime;
      evt.preventDefault();
      return false;
    };
    
    const handlePointerUp = (evt: PointerEvent) => {
      isDragging = false;
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–µ—Ä—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å
      if (Math.abs(velocityX) > 1.0 || Math.abs(velocityY) > 1.0) {
        const friction = 1.0; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–∏—è (0.98 = –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ)
        const minVelocity = 0.001; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        
        const animateInertia = () => {
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–µ–Ω–∏–µ
          velocityX *= friction;
          velocityY *= friction;
          
          // –í—Ä–∞—â–∞–µ–º –∫–∞–º–µ—Ä—É —Å –∏–Ω–µ—Ä—Ü–∏–µ–π (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
          camera.alpha -= velocityX * 0.02;
          
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –µ—â–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è
          if (Math.abs(velocityX) > minVelocity || Math.abs(velocityY) > minVelocity) {
            animationId = requestAnimationFrame(animateInertia);
          } else {
            animationId = null;
          }
        };
        
        animationId = requestAnimationFrame(animateInertia);
      }
      
      evt.preventDefault();
      return false;
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    canvas.addEventListener('pointerdown', handlePointerDown, { passive: false });
    canvas.addEventListener('pointermove', handlePointerMove, { passive: false });
    canvas.addEventListener('pointerup', handlePointerUp, { passive: false });
    
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    canvas.addEventListener('wheel', (e) => e.preventDefault(), { passive: false });
    canvas.addEventListener('touchstart', (e) => {
      if (e.touches.length > 1) e.preventDefault();
    }, { passive: false });
    canvas.addEventListener('touchmove', (e) => {
      if (e.touches.length > 1) e.preventDefault();
    }, { passive: false });
    camera.lowerRadiusLimit = 0.5; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ - –æ—á–µ–Ω—å –±–ª–∏–∑–∫–æ
    camera.upperRadiusLimit = 1.0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ - –±–ª–∏–∑–∫–æ
    camera.fov = 0.4; // –£–º–µ–Ω—å—à–∞–µ–º –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è
    camera.minZ = 0.1;
    
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–ø–æ—Å–æ–±—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π –∫—Ä–æ–º–µ –≤—Ä–∞—â–µ–Ω–∏—è
    camera.panningSensibility = 0; // –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º—ã—à—å—é
    camera.wheelPrecision = 0; // –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏
    camera.pinchPrecision = 0; // –û—Ç–∫–ª—é—á–∞–µ–º –∑—É–º –ø–∏–Ω—á–µ–º –Ω–∞ —Ç–∞—á-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    camera.allowUpsideDown = false; // –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ
    camera.useNaturalPinchZoom = false; // –û—Ç–∫–ª—é—á–∞–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∑—É–º –ø–∏–Ω—á–µ–º
    camera.pinchToPanMaxDistance = 0; // –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏–Ω—á–µ–º
    camera.angularSensibilityX = 3000; // –ï—â–µ –±–æ–ª—å—à–µ –∑–∞–º–µ–¥–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
    camera.angularSensibilityY = 3000; // –ï—â–µ –±–æ–ª—å—à–µ –∑–∞–º–µ–¥–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    camera.inertia = 0; // –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω–µ—Ä—Ü–∏—é
    camera.panningInertia = 0; // –û—Ç–∫–ª—é—á–∞–µ–º –∏–Ω–µ—Ä—Ü–∏—é –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
    camera.panningAxis = new Vector3(0, 0, 0); // –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Å—å –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è

    // –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    engine.setHardwareScalingLevel(1 / window.devicePixelRatio); // –£—á–∏—Ç—ã–≤–∞–µ–º DPI –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
    
    // –°–æ–∑–¥–∞–µ–º HDR –æ—Å–≤–µ—â–µ–Ω–∏–µ
    const envTexture = new HDRCubeTexture('/textures/environment/studio.hdr', scene, 512);
    scene.environmentTexture = envTexture;
    scene.environmentIntensity = 1.0;

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ SceneEditor - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    scene.imageProcessingConfiguration!.exposure = 0.6; // –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —ç–∫—Å–ø–æ–∑–∏—Ü–∏—é
    scene.imageProcessingConfiguration!.contrast = 2.5; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    scene.imageProcessingConfiguration!.toneMappingEnabled = true;
    scene.imageProcessingConfiguration!.toneMappingType = 0;

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–≤—Ä–∞—â–µ–Ω–∏–µ
    if (autoRotate) {
      (camera as any).autoRotate = true;
      (camera as any).autoRotateSpeed = 0.5;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø—É—Å—Ç–æ–º—É –º–µ—Å—Ç—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    if (isModal && onClose) {
      scene.onPointerObservable.add((pointerInfo) => {
        if (pointerInfo.type === 1) { // POINTERDOWN
          const pickResult = scene.pick(pointerInfo.event.offsetX, pointerInfo.event.offsetY);
          // –ï—Å–ª–∏ –∫–ª–∏–∫ –Ω–µ –ø–æ–ø–∞–ª –≤ –º–µ—à (–ø—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ), –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
          if (!pickResult || !pickResult.hit || !pickResult.pickedMesh) {
            onClose();
          }
        }
      });
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º 3D –º–æ–¥–µ–ª—å
    const rootUrl = `/models/rewards/${rewardId}/`;
    const fileName = `${rewardId}.gltf`;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setIsLoading(true);
    setLoadingError(null);
    
    SceneLoader.ImportMesh(
      '',
      rootUrl,
      fileName,
      scene,
      (meshes) => {
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
        if (meshes.length > 0) {
          const rootMesh = meshes[0];
          if (rootMesh instanceof Mesh) {
            
            // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
            const scale = size === 'small' ? 0.8 : size === 'large' ? 2.5 : 1.2;
            rootMesh.scaling = new Vector3(-scale, scale, scale); // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π X –¥–ª—è –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            
            // –ù–∞—á–∏–Ω–∞–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
            camera.minZ = 0.1; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –±–ª–∏–∂–Ω—é—é –≤–∏–¥–∏–º–æ—Å—Ç—å
            camera.maxZ = 2; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∞–ª—å–Ω—é—é –≤–∏–¥–∏–º–æ—Å—Ç—å


            // –ò—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–π –º–µ—à –¥–ª—è –¥–µ–∫–∞–ª–∏
            let targetMesh = rootMesh;
            
            for (let child of rootMesh.getChildren(undefined, false)) {
              if (child instanceof Mesh) {
                // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º–µ—à —Å –∏–º–µ–Ω–µ–º 'shape' –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –º–µ—à
                if (child.name === 'shape' || child.name.includes('shape') || child.name.includes('medal') || child.name.includes('badge')) {
                  targetMesh = child;
                  break;
                }
              }
            }

            // –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–µ–∫—Å—Ç—É—Ä—É —Å –Ω–∞—Å—Ç–æ—è—â–∏–º SVG –∏ –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const combinedTexture = new DynamicTexture(`combinedTexture_${Date.now()}`, 2048, scene);
            const textureContext = combinedTexture.getContext() as CanvasRenderingContext2D;
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            textureContext.imageSmoothingEnabled = true;
            textureContext.imageSmoothingQuality = 'high';
            
            // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω - –Ω–µ –∑–∞–ª–∏–≤–∞–µ–º –Ω–∏—á–µ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –≤–ª–∏—è—Ç—å –Ω–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç –º–µ–¥–∞–ª–∏
            // textureContext.fillStyle = 'rgba(0, 0, 0, 0.3)'; // –£–±–∏—Ä–∞–µ–º —Ñ–æ–Ω
            // textureContext.fillRect(0, 0, 2048, 2048);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            textureContext.save();
            
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª –∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ 30 –≥—Ä–∞–¥—É—Å–æ–≤
            textureContext.translate(1130, 1250); // –°–º–µ—â–∞–µ–º –≤ –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
            textureContext.rotate(-30 * Math.PI / 180); // -30 –≥—Ä–∞–¥—É—Å–æ–≤ (–ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ)
            
            // –†–∏—Å—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤–µ—Ä—Ö—É
            textureContext.fillStyle = '#8C5502'; // –¢–µ–º–Ω–æ-–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π —Ü–≤–µ—Ç
            textureContext.font = '400 68px "Bad Script", cursive';
            textureContext.textAlign = 'center';
            textureContext.textBaseline = 'middle';
            textureContext.fillText(userName, 0, -50);
            
            textureContext.fillStyle = '#8C5502'; // –¢–µ–º–Ω–æ-–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π —Ü–≤–µ—Ç
            textureContext.font = '400 42px "Bad Script", cursive';
            textureContext.textAlign = 'center';
            textureContext.textBaseline = 'middle';
            textureContext.fillText('¬∑ –°—Ä–µ–¥–∏ –ø–µ—Ä–≤—ã—Ö ¬∑', 0, 50);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            textureContext.restore();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É
            combinedTexture.update();

            // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –¥–µ–∫–∞–ª—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º Babylon.js
            if (targetMesh.getTotalVertices() > 0 && targetMesh.material) {
              
              // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –¥–µ–∫–∞–ª–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
              const decalMaterial = new StandardMaterial(`decalMaterial_${Date.now()}`, scene);
              decalMaterial.diffuseTexture = combinedTexture;
              decalMaterial.diffuseTexture.hasAlpha = true;
              decalMaterial.zOffset = -2;
              decalMaterial.backFaceCulling = true; // –í–∫–ª—é—á–∞–µ–º culling –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
              decalMaterial.alpha = 1.0; // –ü–æ–ª–Ω–∞—è –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
              decalMaterial.useAlphaFromDiffuseTexture = true; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ñ–∞ –∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã
              
              // –°–æ–∑–¥–∞–µ–º –¥–µ–∫–∞–ª—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
              const decal = MeshBuilder.CreateDecal(`decal_${Date.now()}`, targetMesh, {
                position: new Vector3(0, 0, 0),
                normal: new Vector3(0, 0, 1),
                size: new Vector3(0.5, 0.5, 0.5),
                angle: 0,
                cullBackFaces: true // –í–∫–ª—é—á–∞–µ–º culling –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
              });
              
              decal.material = decalMaterial;
              decal.visibility = 1.0; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º –≤–∏–¥–∏–º–æ–π
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
            const cameraParent = new TransformNode('cameraParent', scene);
            cameraParent.position = Vector3.Zero();
            
            // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–∞–º–µ—Ä—É –∫ —Ä–æ–¥–∏—Ç–µ–ª—é
            camera.parent = cameraParent;
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            const rotationSpeed = 0.0002; // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
            let rotationAngle = 0;
            
            const animateParentRotation = () => {
              rotationAngle += rotationSpeed;
              cameraParent.rotation.y = rotationAngle;
              requestAnimationFrame(animateParentRotation);
            };
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤—Ä–∞—â–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è
            animateParentRotation();
          }

          // –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∏ –≤—Ä–∞—â–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
          const startRadius = 5; // –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–¥–∞–ª–µ–∫–∞ (–∫–∞–∫ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ)
          const endRadius = 0.8; // –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ –º–æ–¥–µ–ª–∏
          const startAlpha = camera.alpha;
          const endAlpha = startAlpha - Math.PI / 2; // –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ -90¬∞ –≤ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É
          const animationDuration = 1500; // 1.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
          const startTime = Date.now();

          const animateCamera = () => {
            const elapsed = Date.now() - startTime;
            const progress = Math.min(elapsed / animationDuration, 1);
            
            // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è: –º–µ–¥–ª–µ–Ω–Ω–æ–µ –Ω–∞—á–∞–ª–æ, –ø–ª–∞–≤–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ, –ø–ª–∞–≤–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
            const easeProgress = progress < 0.5 
              ? 2 * progress * progress 
              : 1 - Math.pow(-2 * progress + 2, 3) / 2;
            
            // –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
            const currentRadius = startRadius + (endRadius - startRadius) * easeProgress;
            camera.radius = currentRadius;
            
            // –ü–ª–∞–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
            const currentAlpha = startAlpha + (endAlpha - startAlpha) * easeProgress;
            camera.alpha = currentAlpha;
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
            camera.minZ = 0.01 + (0.1 - 0.01) * (1 - easeProgress);
            camera.maxZ = 10 + (2 - 10) * (1 - easeProgress);
            
            if (progress < 1) {
              requestAnimationFrame(animateCamera);
            } else {
              // –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–∫—Ä—ã–≤–∞–µ–º –∫—Ä—É–∂–æ—á–µ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
              setIsLoading(false);
            }
          };

          // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∫–∞–º–µ—Ä—ã —Å—Ä–∞–∑—É
          animateCamera();
        }
        
        if (onLoad) {
          onLoad();
        }
      },
      undefined, // –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω—É–∂–µ–Ω
      (error) => {
        // –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        setIsLoading(false);
        setLoadingError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: ${error.toString()}`);
        
        if (onError) {
          onError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: ${error.toString()}`);
        }
      }
    );

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–Ω–¥–µ—Ä
    engine.runRenderLoop(() => {
      scene.render();
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    const handleResize = () => {
      
      if (isModal) {
        // –í –º–æ–¥–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–µ–ª–∞–µ–º canvas –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º –Ω–∞ –æ—Å–Ω–æ–≤–µ viewport
        const viewportWidth = window.innerWidth;
        const viewportHeight = window.innerHeight;
        const minDimension = Math.min(viewportWidth, viewportHeight);
        
        // Canvas –∑–∞–Ω–∏–º–∞–µ—Ç 80% –æ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ viewport, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 300px –∏ –Ω–µ –±–æ–ª—å—à–µ 600px
        const canvasSize = Math.max(300, Math.min(600, Math.floor(minDimension * 0.8)));
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ canvas –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏ –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö DPI —ç–∫—Ä–∞–Ω–∞—Ö
        const pixelRatio = window.devicePixelRatio || 1;
        canvas.width = canvasSize * pixelRatio;
        canvas.height = canvasSize * pixelRatio;
        canvas.style.width = canvasSize + 'px';
        canvas.style.height = canvasSize + 'px';
      } else {
        // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –Ω–æ –¥–µ–ª–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–º
        const container = canvas.parentElement;
        if (container) {
          const rect = container.getBoundingClientRect();
          const containerSize = Math.min(rect.width, rect.height);
          
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ canvas –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏ –Ω–∞ –≤—ã—Å–æ–∫–∏—Ö DPI —ç–∫—Ä–∞–Ω–∞—Ö
          const pixelRatio = window.devicePixelRatio || 1;
          canvas.width = containerSize * pixelRatio;
          canvas.height = containerSize * pixelRatio;
          canvas.style.width = containerSize + 'px';
          canvas.style.height = containerSize + 'px';
        }
      }
      engine.resize();
    };
    window.addEventListener('resize', handleResize);

    return () => {
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      window.removeEventListener('resize', handleResize);
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏–Ω–µ—Ä—Ü–∏–∏
      if (animationId) {
        cancelAnimationFrame(animationId);
        animationId = null;
      }
      
      // –£–¥–∞–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointermove', handlePointerMove);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('wheel', (e) => e.preventDefault());
      canvas.removeEventListener('touchstart', (e) => {
        if (e.touches.length > 1) e.preventDefault();
      });
      canvas.removeEventListener('touchmove', (e) => {
        if (e.touches.length > 1) e.preventDefault();
      });
      
      if (engineRef.current) {
        engineRef.current.dispose();
      }
      if (sceneRef.current) {
        sceneRef.current.dispose();
      }
    };
  }, [rewardId, size, autoRotate, onLoad, onError]);

  // –ï—Å–ª–∏ —ç—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, —Ä–µ–Ω–¥–µ—Ä–∏–º —Å –º–æ–¥–∞–ª—å–Ω–æ–π –æ–±–µ—Ä—Ç–∫–æ–π
  if (isModal) {
    return (
      <div className="modal-overlay" onClick={handleBackdropClick}>
        <div className="modal-container">
          <canvas 
            ref={canvasRef} 
            className="modal-canvas" 
            onClick={(e) => e.stopPropagation()}
          />
          
          {/* –ö—Ä—É–∂–æ—á–µ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ */}
          {isLoading && (
            <div className="loading-spinner" onClick={(e) => e.stopPropagation()}>
              <div className="spinner"></div>
            </div>
          )}
          
          {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
          {loadingError && (
            <div className="loading-error" onClick={(e) => e.stopPropagation()}>
              <div className="error-icon">‚ö†Ô∏è</div>
              <div className="error-text">{loadingError}</div>
            </div>
          )}
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä–∞–¥–µ –ø–æ–≤–µ—Ä—Ö canvas */}
          <div className="modal-reward-info" onClick={(e) => e.stopPropagation()}>
            <div className="modal-reward-title">
              {rewardName || rewardId}
            </div>
            <div className="modal-reward-description">
              {rewardPrice && (
                <div className="modal-reward-price">
                  {rewardPrice} –ì–ª—é–∫–æ–∏–Ω–æ–≤
                </div>
              )}
              {rewardDescription && (
                <div className="modal-reward-description-text">
                  {rewardDescription}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  }

  // –û–±—ã—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –±–µ–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  return (
    <div data-size={size} style={{ position: 'relative' }}>
      <canvas ref={canvasRef} />
      
      {/* –ö—Ä—É–∂–æ—á–µ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {isLoading && (
        <div className="loading-spinner">
          <div className="spinner"></div>
        </div>
      )}
      
      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
      {loadingError && (
        <div className="loading-error">
          <div className="error-icon">‚ö†Ô∏è</div>
          <div className="error-text">{loadingError}</div>
        </div>
      )}
    </div>
  );
};

export default RewardViewerComponent;
