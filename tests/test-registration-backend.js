const axios = require('axios');
const Imap = require('imap');
const { simpleParser } = require('mailparser');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = require('./config');
const TEST_EMAIL = config.testAccount.email;
const TEST_PASSWORD = config.testAccount.password;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–æ—á—Ç—ã
async function getVerificationCodeFromEmail() {
  return new Promise((resolve, reject) => {
    // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
    const timeout = setTimeout(() => {
      imap.end();
      reject(new Error('–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞ —Å –ø–æ—á—Ç—ã (30 —Å–µ–∫)'));
    }, 30000);

    const imap = new Imap({
      user: TEST_EMAIL,
      password: TEST_PASSWORD,
      host: 'mail.jino.ru',
      port: 993,
      tls: true,
      tlsOptions: { rejectUnauthorized: false }
    });

    imap.once('ready', () => {
      imap.openBox('INBOX', false, (err, box) => {
        if (err) {
          reject(err);
          return;
        }

        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–∏—Å—å–º–∞ (—Å–Ω–∞—á–∞–ª–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –≤—Å–µ)
        console.log('üîç –ò—â–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –æ—Ç hello@gluko.city...');
        imap.search(['UNSEEN', ['FROM', 'hello@gluko.city']], (err, results) => {
          if (err) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º:', err.message);
            clearTimeout(timeout);
            imap.end();
            reject(err);
            return;
          }
          
          if (results.length === 0) {
            // –ï—Å–ª–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∏—â–µ–º –≤—Å–µ –ø–∏—Å—å–º–∞ –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            console.log('üìß –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –Ω–µ—Ç, –∏—â–µ–º –≤—Å–µ –ø–∏—Å—å–º–∞ –æ—Ç hello@gluko.city...');
            imap.search([['FROM', 'hello@gluko.city']], (err2, results2) => {
              if (err2) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–∏—Å–µ–º:', err2.message);
                clearTimeout(timeout);
                imap.end();
                reject(err2);
                return;
              }
              
              if (results2.length === 0) {
                console.log('‚ùå –ü–∏—Å–µ–º –æ—Ç hello@gluko.city –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                clearTimeout(timeout);
                imap.end();
                reject(new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏'));
                return;
              }
              
              console.log(`üìß –ù–∞–π–¥–µ–Ω–æ ${results2.length} –ø–∏—Å–µ–º –æ—Ç hello@gluko.city`);
              processMessages(results2);
            });
          } else {
            console.log(`üìß –ù–∞–π–¥–µ–Ω–æ ${results.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –æ—Ç hello@gluko.city`);
            processMessages(results);
          }
        });

        function processMessages(results) {
          console.log(`üìß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${results.length} –ø–∏—Å–µ–º...`);
          const messageId = results.slice(-1)[0]; // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–∏—Å—å–º–æ
          console.log(`üìß –ë–µ—Ä–µ–º –ø–∏—Å—å–º–æ —Å ID: ${messageId}`);
          const fetch = imap.fetch(messageId, { bodies: '' });
          
          fetch.on('message', (msg, seqno) => {
            console.log(`üìß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–æ ${seqno}...`);
            msg.on('body', (stream, info) => {
              console.log(`üìß –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞...`);
              simpleParser(stream, (err, parsed) => {
                if (err) {
                  console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∏—Å—å–º–∞:`, err.message);
                  reject(err);
                  return;
                }

                const text = parsed.text || '';
                console.log(`üìß –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):`, text.substring(0, 200));
                
                const codeMatch = text.match(/–∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏[:\s]*(\d{6})/i) || 
                                 text.match(/verification code[:\s]*(\d{6})/i) ||
                                 text.match(/(\d{6})/);

                console.log(`üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–¥:`, codeMatch ? codeMatch[1] : '–Ω–µ –Ω–∞–π–¥–µ–Ω');

                if (codeMatch) {
                  console.log(`‚úÖ –ö–æ–¥ –Ω–∞–π–¥–µ–Ω: ${codeMatch[1]}`);
                  
                  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ —Å—Ä–∞–∑—É
                  clearTimeout(timeout);
                  resolve(codeMatch[1]);
                  
                  // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–∏—Å—å–º–∞ –æ—Ç hello@gluko.city
                  console.log('üóëÔ∏è –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–∏—Å—å–º–∞ –æ—Ç hello@gluko.city...');
                  
                  // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                  setTimeout(() => {
                    imap.search([['FROM', 'hello@gluko.city']], (err, allResults) => {
                      if (err) {
                        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∏—Å–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', err.message);
                        imap.end();
                        return;
                      }
                      
                      if (allResults.length === 0) {
                        console.log('üìß –ü–∏—Å–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                        imap.end();
                        return;
                      }
                      
                      console.log(`üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ ${allResults.length} –ø–∏—Å–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è`);
                      
                      // –ü—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ - –ø–∏—Å—å–º–∞ –æ—Å—Ç–∞–Ω—É—Ç—Å—è, –Ω–æ —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
                      console.log('‚ö†Ô∏è –ü–∏—Å—å–º–∞ –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è (–ø—Ä–æ–±–ª–µ–º–∞ —Å IMAP), –Ω–æ —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç');
                      imap.end();
                    });
                  }, 500);
                } else {
                  clearTimeout(timeout);
                  imap.end();
                  reject(new Error('–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∏—Å—å–º–µ'));
                }
              });
            });
          });

          fetch.once('error', (err) => {
            clearTimeout(timeout);
            imap.end();
            reject(err);
          });

          fetch.once('end', () => {
            // –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (!imap._ended) {
              imap.end();
            }
          });
        }
      });
    });

    imap.once('error', (err) => {
      clearTimeout(timeout);
      reject(err);
    });

    imap.connect();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function deleteUser(email) {
  console.log(`üóëÔ∏è  –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –≤—Ö–æ–¥–∏–º –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
    const loginResponse = await axios.post(`${API_BASE_URL}/api/auth/login`, {
      email: email,
      password: TEST_PASSWORD
    });
    
    const token = loginResponse.data.token;
    
    // –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–æ–∫–µ–Ω–æ–º
    const response = await axios.post(`${API_BASE_URL}/api/auth/delete-user`, {
      email: email
    }, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω:`, response.data);
    return true;
  } catch (error) {
    if (error.response?.status === 404 || error.response?.data?.message?.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      console.log(`‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)`);
      return true;
    }
    if (error.response?.status === 400 && error.response?.data?.message?.includes('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')) {
      console.log(`‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)`);
      return true;
    }
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error.response?.data || error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async function sendVerificationCode(email) {
  console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è: ${email}`);
  
  // –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–∑-–∑–∞ rate limiting
  console.log(`‚è≥ –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting...`);
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  try {
    const response = await axios.post(`${API_BASE_URL}/api/auth/send-verification`, {
      email: email
    });
    
    console.log(`‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:`, response.data.message);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞:`, error.response?.data || error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(email, password, verificationCode) {
  console.log(`üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);
  
  try {
    const response = await axios.post(`${API_BASE_URL}/api/auth/register`, {
      email: email,
      password: password,
      verificationCode: verificationCode
    });
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:`, {
      userId: response.data.userId,
      isPioneer: response.data.isPioneer,
      pioneerNumber: response.data.pioneerNumber,
      tokenLength: response.data.token?.length || 0
    });
    return response.data;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:`, error.response?.data || error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkUserExists(email) {
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);
  
  try {
    const response = await axios.post(`${API_BASE_URL}/api/auth/check-email`, {
      email: email
    });
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:`, response.data);
    return response.data.exists;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error.response?.data || error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loginUser(email, password) {
  console.log(`üîê –í—Ö–æ–¥–∏–º –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${email}`);
  
  try {
    const response = await axios.post(`${API_BASE_URL}/api/auth/login`, {
      email: email,
      password: password
    });
    
    console.log(`‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:`, {
      userId: response.data.userId,
      tokenLength: response.data.token?.length || 0
    });
    return response.data;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:`, error.response?.data || error.message);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π
async function testPasswordValidation(email, password, expectedError) {
  console.log(`üîí –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å: "${password}" (–æ–∂–∏–¥–∞–µ–º: "${expectedError}")`);
  
  try {
    const response = await axios.post(`${API_BASE_URL}/api/auth/register`, {
      email: email,
      password: password,
      verificationCode: '111111'
    });
    
    console.log(`‚ùå –û–®–ò–ë–ö–ê: –ü–∞—Ä–æ–ª—å "${password}" –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é, –Ω–æ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª!`);
    return false;
  } catch (error) {
    const actualError = error.response?.data?.error;
    if (actualError === expectedError) {
      console.log(`‚úÖ –ü–∞—Ä–æ–ª—å "${password}" –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω: ${actualError}`);
      return true;
    } else {
      console.log(`‚ùå –û–®–ò–ë–ö–ê: –û–∂–∏–¥–∞–ª–∏ "${expectedError}", –ø–æ–ª—É—á–∏–ª–∏ "${actualError}"`);
      return false;
    }
  }
}

async function runBackendTest(environment = 'local') {
  console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BACKEND');
  console.log('==================================');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º
  const config = require('./config');
  const API_BASE_URL = config.urls[environment] || config.baseUrl;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
  global.API_BASE_URL = API_BASE_URL;
  
  console.log(`üåê API URL: ${API_BASE_URL}`);
  console.log(`üìß Email: ${TEST_EMAIL}`);
  console.log(`üîë Password: ${TEST_PASSWORD}`);
  console.log(`üî¢ Verification Code: –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω —Å –ø–æ—á—Ç—ã`);
  console.log('');
  
  let success = true;
  
  try {
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìã –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('-----------------------------------------------');
    const userExists = await checkUserExists(TEST_EMAIL);
    
    // –®–∞–≥ 2: –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    console.log('\nüìã –®–ê–ì 2: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)');
    console.log('--------------------------------------------------');
    const deleted = await deleteUser(TEST_EMAIL);
    if (!deleted) {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç');
    }

    // –®–∞–≥ 2.5: –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞—Ä–æ–ª–µ–π
    console.log('\nüîí –®–ê–ì 2.5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π');
    console.log('--------------------------------------------------');
    
    const passwordTests = [
      { password: '111', expectedError: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' },
      { password: '111111', expectedError: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É' }
    ];
    
    let passwordTestsPassed = 0;
    for (const test of passwordTests) {
      const passed = await testPasswordValidation(TEST_EMAIL, test.password, test.expectedError);
      if (passed) passwordTestsPassed++;
    }
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π: ${passwordTestsPassed}/${passwordTests.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    // –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    console.log('\nüìã –®–ê–ì 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
    console.log('--------------------------------------');
    const codeSent = await sendVerificationCode(TEST_EMAIL);
    if (!codeSent) {
      success = false;
    }
    
    // –®–∞–≥ 4: –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–æ—á—Ç—ã
    console.log('\nüìã –®–ê–ì 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –ø–æ—á—Ç—ã');
    console.log('-----------------------------------');
    let verificationCode;
    try {
      console.log('‚è≥ –ñ–¥–µ–º –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
      await new Promise(resolve => setTimeout(resolve, 3000)); // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã
      verificationCode = await getVerificationCodeFromEmail();
      console.log(`‚úÖ –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω: ${verificationCode}`);
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Å–µ–º
      console.log('‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∏—Å–µ–º...');
      await new Promise(resolve => setTimeout(resolve, 2000));
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–¥–∞:`, error.message);
      success = false;
      verificationCode = '111111'; // Fallback –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    }
    
    // –®–∞–≥ 5: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    console.log('\nüìã –®–ê–ì 5: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º');
    console.log('-----------------------------------');
    const registrationResult = await registerUser(TEST_EMAIL, TEST_PASSWORD, verificationCode);
    if (!registrationResult) {
      success = false;
    }
    
    // –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('\nüìã –®–ê–ì 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    console.log('-------------------------------');
    const userExistsAfter = await checkUserExists(TEST_EMAIL);
    if (!userExistsAfter) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!');
      success = false;
    }
    
    // –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥
    console.log('\nüìã –®–ê–ì 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞');
    console.log('-----------------------------');
    const loginResult = await loginUser(TEST_EMAIL, TEST_PASSWORD);
    if (!loginResult) {
      success = false;
    }
    
    // –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º debug endpoint
    console.log('\nüìã –®–ê–ì 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ debug endpoint');
    console.log('----------------------------------');
    try {
      const debugResponse = await axios.get(`${API_BASE_URL}/api/debug/db`);
      console.log('‚úÖ Debug endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç:', debugResponse.data);
    } catch (error) {
      console.log('‚ö†Ô∏è  Debug endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.response?.data || error.message);
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    success = false;
  }
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('==========================');
  if (success) {
    console.log('‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    console.log('üéâ Backend —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } else {
    console.log('‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò');
    console.log('üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ª–∞–¥–∫–∞');
  }
  
  return success;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  runBackendTest()
    .then(success => {
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:', error);
      process.exit(1);
    });
}

module.exports = { runBackendTest };
