const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = process.env.TEST_API_URL || 'http://localhost:3000';
const TEST_EMAIL = 'sdiz@ya.ru';
const TEST_PASSWORD = '111111a';
const TEST_VERIFICATION_CODE = '111111';

console.log('üß™ –¢–ï–°–¢ BACKEND –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò');
console.log('============================');
console.log(`üåê API URL: ${API_BASE_URL}`);
console.log(`üìß Email: ${TEST_EMAIL}`);
console.log(`üîë Password: ${TEST_PASSWORD}`);
console.log(`üî¢ Verification Code: ${TEST_VERIFICATION_CODE}`);
console.log('');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function deleteUser(email) {
  console.log(`üóëÔ∏è  –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);
  
  try {
    const response = await axios.post(`${API_BASE_URL}/api/auth/delete-user`, {
      email: email
    });
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω:`, response.data);
    return true;
  } catch (error) {
    if (error.response?.status === 404 || error.response?.data?.message?.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω')) {
      console.log(`‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)`);
      return true;
    }
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error.response?.data || error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
async function sendVerificationCode(email) {
  console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è: ${email}`);
  
  try {
    const response = await axios.post(`${API_BASE_URL}/api/auth/send-verification`, {
      email: email
    });
    
    console.log(`‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:`, response.data.message);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞:`, error.response?.data || error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(email, password, verificationCode) {
  console.log(`üìù –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);
  
  try {
    const response = await axios.post(`${API_BASE_URL}/api/auth/register`, {
      email: email,
      password: password,
      verificationCode: verificationCode
    });
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:`, {
      userId: response.data.userId,
      isPioneer: response.data.isPioneer,
      pioneerNumber: response.data.pioneerNumber,
      tokenLength: response.data.token?.length || 0
    });
    return response.data;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:`, error.response?.data || error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function checkUserExists(email) {
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}`);
  
  try {
    const response = await axios.post(`${API_BASE_URL}/api/auth/check-email`, {
      email: email
    });
    
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:`, response.data);
    return response.data.exists;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, error.response?.data || error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loginUser(email, password) {
  console.log(`üîê –í—Ö–æ–¥–∏–º –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${email}`);
  
  try {
    const response = await axios.post(`${API_BASE_URL}/api/auth/login`, {
      email: email,
      password: password
    });
    
    console.log(`‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω:`, {
      userId: response.data.userId,
      tokenLength: response.data.token?.length || 0
    });
    return response.data;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ:`, error.response?.data || error.message);
    return null;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runBackendTest() {
  console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï BACKEND');
  console.log('==================================');
  
  let success = true;
  
  try {
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìã –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('-----------------------------------------------');
    const userExists = await checkUserExists(TEST_EMAIL);
    
    // –®–∞–≥ 2: –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if (userExists) {
      console.log('\nüìã –®–ê–ì 2: –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      console.log('-----------------------------------------------');
      const deleted = await deleteUser(TEST_EMAIL);
      if (!deleted) {
        success = false;
      }
    } else {
      console.log('\nüìã –®–ê–ì 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ');
      console.log('----------------------------------------------------------');
    }
    
    // –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    console.log('\nüìã –®–ê–ì 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
    console.log('--------------------------------------');
    const codeSent = await sendVerificationCode(TEST_EMAIL);
    if (!codeSent) {
      success = false;
    }
    
    // –®–∞–≥ 4: –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìã –®–ê–ì 4: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('-----------------------------------');
    const registrationResult = await registerUser(TEST_EMAIL, TEST_PASSWORD, TEST_VERIFICATION_CODE);
    if (!registrationResult) {
      success = false;
    }
    
    // –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    console.log('\nüìã –®–ê–ì 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    console.log('-------------------------------');
    const userExistsAfter = await checkUserExists(TEST_EMAIL);
    if (!userExistsAfter) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!');
      success = false;
    }
    
    // –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ö–æ–¥
    console.log('\nüìã –®–ê–ì 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞');
    console.log('-----------------------------');
    const loginResult = await loginUser(TEST_EMAIL, TEST_PASSWORD);
    if (!loginResult) {
      success = false;
    }
    
    // –®–∞–≥ 7: –ü—Ä–æ–≤–µ—Ä—è–µ–º debug endpoint
    console.log('\nüìã –®–ê–ì 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ debug endpoint');
    console.log('----------------------------------');
    try {
      const debugResponse = await axios.get(`${API_BASE_URL}/api/debug/db`);
      console.log('‚úÖ Debug endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç:', debugResponse.data);
    } catch (error) {
      console.log('‚ö†Ô∏è  Debug endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.response?.data || error.message);
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    success = false;
  }
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('==========================');
  if (success) {
    console.log('‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
    console.log('üéâ Backend —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } else {
    console.log('‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò');
    console.log('üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ª–∞–¥–∫–∞');
  }
  
  return success;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  runBackendTest()
    .then(success => {
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:', error);
      process.exit(1);
    });
}

module.exports = { runBackendTest };
