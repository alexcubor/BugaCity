const { spawn } = require('child_process');
const path = require('path');
const { chromium } = require('playwright');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
const config = require('./config');

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
let runBackendTest, runEmailRegistrationTest, runYandexOAuthTest, runVKOAuthTest;

try {
  const backendModule = require('./test-registration-backend');
  runBackendTest = backendModule.runBackendTest;
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ test-registration-backend:', error.message);
}

try {
  const frontendModule = require('./test-registration-frontend');
  runEmailRegistrationTest = frontendModule.runEmailRegistrationTest;
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ test-registration-frontend:', error.message);
}

try {
  const yandexModule = require('./test-yandex-oauth');
  runYandexOAuthTest = yandexModule.runYandexOAuthTest;
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ test-yandex-oauth:', error.message);
}

try {
  const vkModule = require('./test-vk-oauth');
  runVKOAuthTest = vkModule.runVKOAuthTest;
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ test-vk-oauth:', error.message);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
async function launchBrowser(url) {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º');
  console.log('=====================================');
  console.log(`üåê URL: ${url}`);
  console.log('üíæ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏');
  console.log('‚ùå –ó–∞–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ');
  console.log('=====================================');
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
  const PROFILE_PATH = path.resolve(__dirname, '..', 'browser-profile');
  const browserOptions = {
    headless: false,
    slowMo: 100
  };

  const context = await chromium.launchPersistentContext(PROFILE_PATH, browserOptions);
  const page = context.pages()[0] || await context.newPage();
  
  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è
  page.on('console', msg => {
    console.log(`üìù [${msg.type()}] ${msg.text()}`);
  });
  
  page.on('request', request => {
    if (request.url().includes('oauth') || request.url().includes('auth')) {
      console.log(`üåê [REQUEST] ${request.method()} ${request.url()}`);
    }
  });
  
  page.on('response', response => {
    if (response.url().includes('oauth') || response.url().includes('auth')) {
      console.log(`üì° [RESPONSE] ${response.status()} ${response.url()}`);
    }
  });
  
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç
  await page.goto(url);
  console.log(`üåê –û—Ç–∫—Ä—ã—Ç —Å–∞–π—Ç: ${url}`);
  console.log('‚è≥ –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞...');

  // –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
  await new Promise((resolve) => {
    const checkInterval = setInterval(async () => {
      try {
        await page.evaluate(() => document.title);
      } catch (error) {
        clearInterval(checkInterval);
        resolve();
      }
    }, 1000);
  });

  console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
  console.log(`üíæ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${PROFILE_PATH}`);
}

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
const availableTests = {
  'reward': 'test-reward.js',
  'reward-simple': 'test-reward-simple.js',
  'reward-backend': 'test-reward-backend.js',
  'user-name': 'test-user-name-update.js',
  'registration-backend': 'test-registration-backend.js',
  'registration-frontend': 'test-registration-frontend.js',
  'yandex-oauth': 'test-yandex-oauth.js',
  'vk-oauth': 'test-vk-oauth.js',
  'all': 'internal', // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
  'browser': 'internal'
};

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
const availableEnvironments = ['local', 'npm', 'docker', 'prod'];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests(environment = 'local') {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è config.js
  process.env.TEST_ENVIRONMENT = environment;
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config.js —Å –Ω–æ–≤—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º
  delete require.cache[require.resolve('./config')];
  const config = require('./config');
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤');
  console.log('=====================================');
  console.log('üìã –¢–µ—Å—Ç—ã –±—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:');
  console.log('1. ‚ö° Backend —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç)');
  console.log('2. üîµ –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Yandex OAuth');
  console.log('=====================================\n');

  const results = {
    backendRegistration: false,
    yandexOAuth: false
  };

  // –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å persistent context
  const PROFILE_PATH = path.resolve(__dirname, '..', 'browser-profile');
  const browserOptions = {
    headless: config.browser.headless,
    slowMo: config.browser.slowMo || 100,
    timeout: config.browser.timeout
  };

  if (config.browser.disableCache) {
    browserOptions.args = [
      '--disable-application-cache',
      '--disable-offline-load-stale-cache',
      '--disable-background-networking',
      '--disable-background-timer-throttling',
      '--disable-backgrounding-occluded-windows',
      '--disable-renderer-backgrounding',
      '--disable-features=TranslateUI',
      '--disable-ipc-flooding-protection',
      '--aggressive-cache-discard'
    ];
  }

  const context = await chromium.launchPersistentContext(PROFILE_PATH, browserOptions);
  const page = context.pages()[0] || await context.newPage();

  try {
    // 1. –ë—ã—Å—Ç—Ä—ã–π backend —Ç–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('‚ö° –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ backend —Ç–µ—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
    if (!runBackendTest) {
      console.error('‚ùå –§—É–Ω–∫—Ü–∏—è runBackendTest –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
      results.backendRegistration = false;
    } else {
      try {
        const backendResult = await runBackendTest();
        results.backendRegistration = backendResult;
        console.log(`‚úÖ Backend —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${backendResult ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}\n`);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ backend —Ç–µ—Å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
        results.backendRegistration = false;
      }
    }

    // 2. –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Yandex OAuth
    console.log('üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Yandex OAuth...');
    if (!runYandexOAuthTest) {
      console.error('‚ùå –§—É–Ω–∫—Ü–∏—è runYandexOAuthTest –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
      results.yandexOAuth = false;
    } else {
      try {
        // –î–ª—è OAuth —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        console.log(`üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –¥–ª—è OAuth: ${config.baseUrl}`);
        
        const yandexResult = await runYandexOAuthTest(page, context);
        results.yandexOAuth = yandexResult;
        console.log(`‚úÖ –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Yandex OAuth –∑–∞–≤–µ—Ä—à–µ–Ω: ${yandexResult ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}\n`);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Yandex OAuth:', error.message);
        results.yandexOAuth = false;
      }
    }


  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    await context.close();
  }

  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–°–ï–• –¢–ï–°–¢–û–í:');
  console.log('=====================================');
  console.log(`‚ö° Backend —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${results.backendRegistration ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}`);
  console.log(`üîµ –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Yandex OAuth: ${results.yandexOAuth ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}`);

  const successCount = Object.values(results).filter(Boolean).length;
  const totalTests = Object.keys(results).length;

  console.log(`\nüéØ –ò–¢–û–ì–û: ${successCount}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);

  if (successCount === totalTests) {
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
  } else if (successCount > 0) {
    console.log('‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´');
  } else {
    console.log('‚ùå –í–°–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´');
  }

  console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
  
  return successCount === totalTests;
}

function showHelp() {
  console.log('üß™ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç-—Ä–∞–Ω–Ω–µ—Ä');
  console.log('============================');
  console.log('');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('  node tests/run-test.js <—Ç–µ—Å—Ç> [–æ–∫—Ä—É–∂–µ–Ω–∏–µ]');
  console.log('  node tests/run-test.js <—Ç–µ—Å—Ç1,—Ç–µ—Å—Ç2,—Ç–µ—Å—Ç3> [–æ–∫—Ä—É–∂–µ–Ω–∏–µ]');
  console.log('');
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:');
  Object.keys(availableTests).forEach(test => {
    console.log(`  - ${test}`);
  });
  console.log('');
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
  availableEnvironments.forEach(env => {
    console.log(`  - ${env}`);
  });
  console.log('');
  console.log('–ü—Ä–∏–º–µ—Ä—ã:');
  console.log('  node tests/run-test.js reward local');
  console.log('  node tests/run-test.js reward-backend npm');
  console.log('  node tests/run-test.js browser prod');
  console.log('  node tests/run-test.js registration-frontend,reward local');
  console.log('');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
async function runMultipleTests(testNames, environment) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è config.js
  process.env.TEST_ENVIRONMENT = environment;
  
  // –û—á–∏—â–∞–µ–º –∫—ç—à –º–æ–¥—É–ª—è –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º config
  delete require.cache[require.resolve('./config')];
  const config = require('./config');
  const path = require('path');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º browser —Ç–µ—Å—Ç)
  const needsBrowser = testNames.some(testName => 
    testName === 'registration-frontend' || 
    testName === 'reward' || 
    testName === 'yandex-oauth' ||
    testName === 'vk-oauth'
  );
  
  let context = null;
  let page = null;
  
  if (needsBrowser) {
    const { chromium } = require('playwright');
    
    // –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è frontend —Ç–µ—Å—Ç–æ–≤
    const PROFILE_PATH = path.resolve(__dirname, '..', 'browser-profile');
    const browserOptions = {
      headless: config.browser.headless,
      slowMo: config.browser.slowMo,
      timeout: config.browser.timeout
    };

    if (config.browser.disableCache) {
      browserOptions.args = [
        '--disable-application-cache',
        '--disable-offline-load-stale-cache',
        '--disable-background-networking',
        '--disable-background-timer-throttling',
        '--disable-backgrounding-occluded-windows',
        '--disable-renderer-backgrounding',
        '--disable-features=TranslateUI',
        '--disable-ipc-flooding-protection',
        '--aggressive-cache-discard'
      ];
    }

    context = await chromium.launchPersistentContext(PROFILE_PATH, browserOptions);
    page = context.pages()[0] || await context.newPage();
  }
  
  const results = [];
  
  try {
    for (let i = 0; i < testNames.length; i++) {
      const testName = testNames[i];
      
      console.log(`\nüìÅ –¢–µ—Å—Ç ${i + 1}/${testNames.length}: ${testName}`);
      console.log('============================');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –Ω–∞–ø—Ä—è–º—É—é, –ø–µ—Ä–µ–¥–∞–≤–∞—è page –∏ context
      let result;
      try {
        if (testName === 'registration-frontend') {
          const { runEmailRegistrationTest } = require('./test-registration-frontend');
          result = await runEmailRegistrationTest(page, context);
        } else if (testName === 'reward') {
          const { runRewardTest } = require('./test-reward');
          result = await runRewardTest(page, context);
        } else if (testName === 'registration-backend') {
          const { runBackendTest } = require('./test-registration-backend');
          result = await runBackendTest(environment);
        } else if (testName === 'yandex-oauth') {
          // –î–ª—è OAuth —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º
          delete require.cache[require.resolve('./config')];
          const { runYandexOAuthTest } = require('./test-yandex-oauth');
          result = await runYandexOAuthTest(page, context);
        } else if (testName === 'vk-oauth') {
          // –î–ª—è OAuth —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
          const { runVKOAuthTest } = require('./test-vk-oauth');
          result = await runVKOAuthTest();
        } else if (testName === 'browser') {
          // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          try {
            const url = config.urls[environment] || config.baseUrl;
            console.log(`üîç Browser —Ç–µ—Å—Ç: environment=${environment}, url=${url}`);
            await launchBrowser(url);
            result = true;
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ browser —Ç–µ—Å—Ç–∞:', error.message);
            result = false;
          }
        } else {
          // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
          const testFile = availableTests[testName];
          const testPath = path.join(__dirname, testFile);
          
          let spawnArgs = [testPath];
          spawnArgs.push(environment);
          
          result = await new Promise((resolve) => {
            const child = spawn('node', spawnArgs, {
              stdio: 'inherit',
              cwd: process.cwd()
            });
            
            child.on('close', (code) => {
              resolve({ success: code === 0, code });
            });
            
            child.on('error', (error) => {
              resolve({ success: false, error: error.message });
            });
          });
        }
        
        if (testName === 'browser') {
          console.log(`\nüìù –¢–µ—Å—Ç "${testName}" –∑–∞–≤–µ—Ä—à—ë–Ω (—Ä—É—á–Ω–æ–π). –ò—Å–∫–ª—é—á—ë–Ω –∏–∑ –æ—Ü–µ–Ω–∫–∏.`);
        } else {
          console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ "${testName}": ${result ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê'}`);
          results.push({ testName, success: result, result });
        }
        
        // –ï—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        if (!result && i < testNames.length - 1) {
          console.log(`\n‚ö†Ô∏è  –¢–µ—Å—Ç "${testName}" –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π.`);
          console.log('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤...');
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ "${testName}":`, error.message);
        results.push({ testName, success: false, error: error.message });
      }
    }
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
    if (context) {
      await context.close();
      console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    }
  }
  
  // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  // –†–∞–∑–¥–µ–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏ —Ä—É—á–Ω—ã–µ —Ç–µ—Å—Ç—ã
  const automaticTests = results.filter(r => r.testName !== 'browser');
  const manualTests = testNames.filter(name => name === 'browser');
  
  if (automaticTests.length > 0) {
    console.log('\nüìä –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´:');
    console.log('============================');
    automaticTests.forEach((result, index) => {
      const status = result.success ? '‚úÖ –£–°–ü–ï–•' : '‚ùå –û–®–ò–ë–ö–ê';
      console.log(`${index + 1}. ${result.testName}: ${status}`);
    });
    
    const successCount = automaticTests.filter(r => r.success).length;
    const totalCount = automaticTests.length;
    
    console.log(`\nüéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï: ${successCount}/${totalCount} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (successCount === totalCount && successCount > 0) {
      console.log('üéâ –í–°–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    } else if (successCount > 0) {
      console.log('‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´');
    }
  }
  
  if (manualTests.length > 0) {
    console.log('\nüìù –†–£–ß–ù–´–ï –¢–ï–°–¢–´:');
    console.log('============================');
    manualTests.forEach((testName, index) => {
      console.log(`${index + 1}. ${testName}: –∑–∞–≤–µ—Ä—à—ë–Ω (—Ä—É—á–Ω–æ–π)`);
    });
    console.log(`\nüìù –†–£–ß–ù–´–ï: ${manualTests.length} —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
  }
  
  // –í—ã—Ö–æ–¥ —Å –∫–æ–¥–æ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
  if (automaticTests.length > 0) {
    const successCount = automaticTests.filter(r => r.success).length;
    const totalCount = automaticTests.length;
    
    if (successCount === totalCount) {
      process.exit(0);
    } else {
      process.exit(1);
    }
  } else {
    // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ä—É—á–Ω—ã–µ —Ç–µ—Å—Ç—ã, –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—Ö
    process.exit(0);
  }
}

function main() {
  const args = process.argv.slice(2);

  if (args.length === 0) {
    // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    runAllTests('local').then(success => {
      console.log('');
      console.log('============================');
      if (success) {
        console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        process.exit(0);
      } else {
        console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–æ–π');
        process.exit(1);
      }
    }).catch(error => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    });
    return;
  }

  if (args[0] === '--help' || args[0] === '-h') {
    showHelp();
    return;
  }

  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
  const testNames = args[0].split(',').map(name => name.trim());
  const environment = args[1] || 'local';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
  if (!availableEnvironments.includes(environment)) {
    console.error(`‚ùå –û–∫—Ä—É–∂–µ–Ω–∏–µ "${environment}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!`);
    console.error('');
    console.error('–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    availableEnvironments.forEach(env => {
      console.error(`  - ${env}`);
    });
    process.exit(1);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç
  for (const testName of testNames) {
    if (!availableTests[testName]) {
      console.error(`‚ùå –¢–µ—Å—Ç "${testName}" –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
      console.error('');
      console.error('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:');
      Object.keys(availableTests).forEach(test => {
        console.error(`  - ${test}`);
      });
      process.exit(1);
    }
  }

  console.log(`üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: ${testNames.join(', ')}`);
  console.log(`üåê –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${environment}`);
  console.log('============================');
  console.log('');

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ 'all'
  if (testNames.includes('all')) {
    runAllTests(environment).then(success => {
      console.log('');
      console.log('============================');
      if (success) {
        console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
        process.exit(0);
      } else {
        console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–æ–π');
        process.exit(1);
      }
    }).catch(error => {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
      process.exit(1);
    });
    return;
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
  runMultipleTests(testNames, environment);
}

if (require.main === module) {
  main();
}

module.exports = { availableTests, availableEnvironments, runAllTests };
