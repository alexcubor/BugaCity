import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { emailService } from '../emailService';
import fs from 'fs';
import path from 'path';

class AuthController {
  private emailVerificationCodes = new Map<string, { code: string, expires: number }>();

  private readSecret(secretName: string, envVar: string): string | null {
    if (process.env[envVar]) {
      return process.env[envVar]!;
    }
    
    try {
      return fs.readFileSync(`/run/secrets/${secretName}`, 'utf8').trim();
    } catch (error) {
      try {
        return fs.readFileSync(`secrets/${secretName}.txt`, 'utf8').trim();
      } catch (error2) {
        console.error(`Failed to read ${secretName} from both paths:`, error2);
        return null;
      }
    }
  }

  public getJwtSecret(): string {
    const secret = this.readSecret('jwt_secret', 'JWT_SECRET');
    if (!secret) {
      throw new Error('JWT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª secrets/jwt_secret.txt –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è JWT_SECRET');
    }
    return secret;
  }

  private async generateIncrementalId(db: any): Promise<string> {
    try {
      const lastUser = await db.collection('users').findOne(
        { _id: { $regex: /^\d{12}$/ } },
        { sort: { _id: -1 } }
      );
      
      let nextId: string;
      if (lastUser && lastUser._id) {
        const currentId = parseInt(lastUser._id);
        nextId = (currentId + 1).toString().padStart(12, '0');
      } else {
        nextId = '1'.padStart(12, '0');
      }
      
      console.log('üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π ID:', nextId);
      return nextId;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID:', error);
      const timestamp = Date.now().toString();
      const random = Math.floor(Math.random() * 100000).toString().padStart(5, '0');
      return timestamp + random;
    }
  }

  private getUserDirPath(userId: string): { fullPath: string, relativePath: string } {
    const hashPrefix = userId.substring(0, 8).padStart(8, '0');
    const fullPath = path.join('uploads', 'users', hashPrefix, userId);
    const relativePath = path.join('users', hashPrefix, userId);
    return { fullPath, relativePath };
  }

  public getAvatarPath(userId: string): string {
    const { relativePath } = this.getUserDirPath(userId);
    return path.join(relativePath, 'avatar.jpg');
  }
  private async downloadAndSaveAvatar(avatarUrl: string, userId: string): Promise<string | null> {
    try {
      console.log('üîç downloadAndSaveAvatar –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { avatarUrl, userId });
      if (!avatarUrl) {
        console.log('‚ùå avatarUrl –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null');
        return null;
      }

      const { fullPath: userDir, relativePath } = this.getUserDirPath(userId);
      
      if (!fs.existsSync(userDir)) {
        fs.mkdirSync(userDir, { recursive: true });
      }

      const response = await fetch(avatarUrl);
      if (!response.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞:', response.status);
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
      const contentType = response.headers.get('content-type');
      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
      if (!contentType || !allowedTypes.includes(contentType)) {
        console.error('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞:', contentType);
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
      const contentLength = response.headers.get('content-length');
      if (contentLength && parseInt(contentLength) > 5 * 1024 * 1024) {
        console.error('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π:', contentLength);
        return null;
      }

      const buffer = await response.arrayBuffer();
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
      if (buffer.byteLength > 5 * 1024 * 1024) {
        console.error('‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:', buffer.byteLength);
        return null;
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ Content-Type
      let extension = '.jpg';
      if (contentType.includes('png')) extension = '.png';
      else if (contentType.includes('gif')) extension = '.gif';
      else if (contentType.includes('webp')) extension = '.webp';

      const filename = `avatar${extension}`;
      const filepath = path.join(userDir, filename);

      fs.writeFileSync(filepath, Buffer.from(buffer));
      
      const avatarRelativePath = path.join(relativePath, filename);
      console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', { filepath, avatarRelativePath, contentType, size: buffer.byteLength });
      return avatarRelativePath;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞:', error);
      return null;
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ VK Client ID (–ø—É–±–ª–∏—á–Ω—ã–π, –Ω–µ —Å–µ–∫—Ä–µ—Ç)
  public getVKClientId(): string {
    return process.env.VK_CLIENT_ID || '';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ VK —Å–µ–∫—Ä–µ—Ç–∞
  public getVKSecret(): string {
    const secret = this.readSecret('vk_secret', 'VK_CLIENT_SECRET');
    if (!secret) {
      throw new Error('VK_CLIENT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª secrets/vk_secret.txt –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è VK_CLIENT_SECRET');
    }
    return secret;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ Yandex Client ID (–ø—É–±–ª–∏—á–Ω—ã–π, –Ω–µ —Å–µ–∫—Ä–µ—Ç)
  public getYandexClientId(): string {
    return process.env.YANDEX_CLIENT_ID || '';
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ Yandex —Å–µ–∫—Ä–µ—Ç–∞
  public getYandexSecret(): string {
    const secret = this.readSecret('yandex_secret', 'YANDEX_CLIENT_SECRET');
    if (!secret) {
      throw new Error('YANDEX_CLIENT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª secrets/yandex_secret.txt –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_CLIENT_SECRET');
    }
    return secret;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞
  private generateVerificationCode(email?: string): string {
    // –ö–æ—Å—Ç—ã–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤: –¥–ª—è sdiz@ya.ru –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 111111
    if (email === 'sdiz@ya.ru') {
      return '111111';
    }
    return Math.floor(100000 + Math.random() * 900000).toString();
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ SMTP —Å–µ—Ä–≤–µ—Ä
  private async sendVerificationEmail(email: string, code: string): Promise<void> {
    try {
      await emailService.sendVerificationEmail(email, code);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendVerificationEmail:', error);
      // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã —Å–µ—Ä–≤–µ—Ä –Ω–µ –∫—Ä–∞—à–∏–ª—Å—è
    }
  }

  async checkEmailExists(req: any, res: any) {
    const { email } = req.body;
    
    if (!email) {
      return res.status(400).json({ error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const db = req.app.locals.db;
    if (!db) {
      return res.status(500).json({ error: 'Database not connected' });
    }

    const existingUser = await db.collection('users').findOne({ email });
    
    res.json({ 
      exists: !!existingUser,
      message: existingUser ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : 'Email —Å–≤–æ–±–æ–¥–µ–Ω'
    });
  }

  async sendVerificationCode(req: any, res: any) {
    const { email } = req.body;
    
    if (!email) {
      return res.status(400).json({ error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const db = req.app.locals.db;
    if (!db) {
      return res.status(500).json({ error: 'Database not connected' });
    }

    const code = authController.generateVerificationCode(email);
    const expires = Date.now() + 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç

    authController.emailVerificationCodes.set(email, { code, expires });

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
      await authController.sendVerificationEmail(email, code);
      res.json({ message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email' });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }
  }

  async register(req: any, res: any) {
    try {
      const { email, password, name, verificationCode } = req.body;
      const db = req.app.locals.db;
      
      if (!db) {
        return res.status(500).json({ error: 'Database not connected' });
      }

      // üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
      if (!password) {
        return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
      }

      if (password.length < 6) {
        return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' });
      }

      if (password.length > 128) {
        return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π' });
      }

      if (!/[a-zA-Z]/.test(password)) {
        return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –±—É–∫–≤—É' });
      }

      const storedData = authController.emailVerificationCodes.get(email);
      if (!storedData || storedData.code !== verificationCode || Date.now() > storedData.expires) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' });
      }

      authController.emailVerificationCodes.delete(email);
      
      const existingUser = await db.collection('users').findOne({ email });
      if (existingUser) {
        return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }

      const hashedPassword = await bcrypt.hash(password, 12);
      
      const numericId = await authController.generateIncrementalId(db);
      
      const userData: any = {
        _id: numericId,
        email,
        password: hashedPassword,
        name: name || '',
        glukocoins: 0,
        rewards: ['pioneer'],
        role: email === 'admin@buga.city' ? 'admin' : 'user' // –ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω
      };
       
      const user = await db.collection('users').insertOne(userData);

      const jwtSecret = authController.getJwtSecret();
      const token = jwt.sign({ userId: numericId }, jwtSecret, { expiresIn: '7d' });
      
      res.json({ 
        token, 
        userId: numericId,
        isPioneer: true,
        pioneerNumber: 1
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ register:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
    }
  }

  async login(req: any, res: any) {
    try {
      const { email, password } = req.body;
      const db = req.app.locals.db;
      
      if (!db) {
        return res.status(500).json({ error: 'Database not connected' });
      }
      
      const user = await db.collection('users').findOne({ email });
      
      if (!user) {
        return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º email –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
      }

      const isPasswordValid = await bcrypt.compare(password, user.password);
      if (!isPasswordValid) {
        return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
      }

      const jwtSecret = authController.getJwtSecret();
      const token = jwt.sign({ userId: user._id }, jwtSecret, { expiresIn: '7d' });
      
      res.json({ token, userId: user._id });
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ login:', error);
      console.error('‚ùå Error details:', {
        message: error.message,
        stack: error.stack,
        code: error.code,
        name: error.name
      });
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' });
    }
  }

  private async exchangeVKCode(code: string, host?: string) {
    // –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º redirect URI –Ω–∞ –æ—Å–Ω–æ–≤–µ host
    const redirectUri = host && host.includes('bugacity-docker.ru.tuna.am') 
      ? 'https://bugacity-docker.ru.tuna.am/api/auth/callback'
      : host && host.includes('gluko.city')
        ? 'https://gluko.city/api/auth/callback'
        : 'https://bugacity-npm.ru.tuna.am/api/auth/callback';
      
    const response = await fetch('https://oauth.vk.com/access_token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({
        client_id: authController.getVKClientId(),
        client_secret: authController.getVKSecret(),
        redirect_uri: redirectUri,
        code: code
      })
    });
    
    const data = await response.json();
    
    if (data.error) {
      throw new Error(`VK OAuth error: ${data.error_description || data.error}`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userResponse = await fetch(`https://api.vk.com/method/users.get?user_ids=${data.user_id}&fields=email&access_token=${data.access_token}&v=5.131`);
    const userData = await userResponse.json();
    
    return {
      id: data.user_id,
      name: `${userData.response[0].first_name} ${userData.response[0].last_name}`,
      email: data.email
    };
  }

  async exchangeYandexCode(code: string, host?: string) {
    // –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å–∞
    console.log('üîç exchangeYandexCode –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { code, host });
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º redirect URI –Ω–∞ –æ—Å–Ω–æ–≤–µ host
    const redirectUri = host && host.includes('bugacity-docker.ru.tuna.am') 
      ? 'https://bugacity-docker.ru.tuna.am/api/auth/callback'
      : host && host.includes('gluko.city')
        ? 'https://gluko.city/api/auth/callback'
        : 'https://bugacity-npm.ru.tuna.am/api/auth/callback';
    
    console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º redirectUri:', redirectUri);
    const yandexClientId = authController.getYandexClientId();
    const yandexClientSecret = authController.getYandexSecret();
    
      
    const response = await fetch('https://oauth.yandex.ru/token', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams({
        grant_type: 'authorization_code',
        code: code,
        client_id: yandexClientId,
        client_secret: yandexClientSecret,
        redirect_uri: redirectUri
      })
    });
    
    console.log('üîç –ó–∞–ø—Ä–æ—Å –∫ Yandex API –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
    const data = await response.json();
    console.log('üîç –û—Ç–≤–µ—Ç –æ—Ç Yandex API:', data);
    
    if (data.error) {
      console.error('‚ùå Yandex OAuth error:', data);
      throw new Error(`Yandex OAuth error: ${data.error_description || data.error}`);
    }
    
    if (!data.access_token) {
      console.error('‚ùå No access token in response:', data);
      throw new Error('No access token received from Yandex');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç Yandex...');
    const userResponse = await fetch('https://login.yandex.ru/info', {
      headers: { 'Authorization': `OAuth ${data.access_token}` }
    });
    console.log('üîç –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç Yandex user info:', userResponse.status);
    const userData = await userResponse.json();
    console.log('üîç –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç Yandex:', userData);
    console.log('üîç Yandex ID:', userData.id, '—Ç–∏–ø:', typeof userData.id);
    
    return {
      id: userData.id,
      name: userData.real_name || userData.display_name || userData.login,
      email: userData.default_email,
      login: userData.login,
      avatar: userData.default_avatar_id ? `https://avatars.yandex.net/get-yapic/${userData.default_avatar_id}/islands-200` : null
    };
  }

  async handleVKCallback(req: any, res: any) {
    try {
      const { accessToken, userData, action } = req.body;

      const db = req.app.locals.db;
      
      const vkId = userData.id;
      console.log('üîç VK ID:', vkId, '—Ç–∏–ø:', typeof vkId);
      
      let user = await db.collection('users').findOne({
        $or: [
          { vkId: vkId },
          { email: userData.email }
        ]
      });

      if (!user) {
        const numericId = await authController.generateIncrementalId(db);
        
        let username = `vk_${vkId}`;
        let counter = 1;
        while (await db.collection('users').findOne({ username })) {
          username = `vk_${vkId}_${counter}`;
          counter++;
        }

        const result = await db.collection('users').insertOne({
          _id: numericId,
          name: userData.first_name + ' ' + userData.last_name,
          username: username,
          email: userData.email || `vk_${vkId}@vk.local`,
          vkId: vkId,
          avatar: userData.photo_200 || null,
          glukocoins: 0,
          rewards: ['pioneer']
        });

        user = await db.collection('users').findOne({ _id: numericId });
        
        res.json({ token: jwt.sign({ userId: numericId }, authController.getJwtSecret(), { expiresIn: '7d' }), user, isNewUser: true });
        return;
      }

      const token = jwt.sign({ userId: user._id }, authController.getJwtSecret(), { expiresIn: '7d' });
      
      res.json({ token, user });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleVKCallback:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }

  async getVKUser(req: any, res: any) {
    try {
      const { accessToken, userId } = req.query;
      const response = await fetch(`https://api.vk.com/method/users.get?user_ids=${userId}&fields=email,photo_200&access_token=${accessToken}&v=5.131`);
      const data = await response.json();
      res.json(data.response[0]);
    } catch (error) {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }


  async handleOAuthCallback(req: any, res: any) {
    try {
      console.log('üîç OAuth callback –ø–æ–ª—É—á–µ–Ω:', {
        url: req.url,
        method: req.method,
        headers: req.headers,
        query: req.query
      });
      
      const { code, state } = req.query;
      
      if (!state) {
        return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä state' });
      }
      
      if (!code) {
        return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä code' });
      }
      
      const [provider, action] = state.split('_'); // yandex_login –∏–ª–∏ yandex_register
      console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OAuth callback: provider=${provider}, action=${action}`);
      
      if (provider === 'yandex') {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Yandex OAuth...');
        const userData = await authController.exchangeYandexCode(code, req.headers.host);
        console.log('üîç –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', userData);
        
        const db = req.app.locals.db;
        if (!db) {
          throw new Error('Database connection failed');
        }
        console.log('üîç –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        
        console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ email:', userData.email);
        let user = await db.collection('users').findOne({
          email: userData.email
        });
        console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');

        if (!user) {
          console.log('üîç –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
          
          const numericId = await authController.generateIncrementalId(db);
          
          let avatarPath = null;
          if (userData.avatar) {
            console.log('üîç –°–∫–∞—á–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            avatarPath = await authController.downloadAndSaveAvatar(userData.avatar, numericId);
          }
          const result = await db.collection('users').insertOne({
            _id: numericId,
            name: userData.name,
            email: userData.email,
            username: userData.email.split('@')[0],
            glukocoins: 0,
            rewards: ['pioneer']
          });

          user = await db.collection('users').findOne({ _id: result.insertedId });
          
          const token = jwt.sign({ userId: user._id }, authController.getJwtSecret(), { expiresIn: '7d' });
          const origin = req.headers.origin || (req.headers.host && req.headers.host.includes('bugacity-docker.ru.tuna.am') 
            ? 'https://bugacity-docker.ru.tuna.am' 
            : req.headers.host && req.headers.host.includes('gluko.city')
              ? 'https://gluko.city'
              : 'https://bugacity-npm.ru.tuna.am');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–æ–±–∏–ª—å–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
          const userAgent = req.headers['user-agent'] || '';
          const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
          
          if (isMobile) {
            // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ–∫–µ–Ω–æ–º
            res.redirect(`${origin}/?token=${token}&user=${encodeURIComponent(JSON.stringify(user))}&isNewUser=true`);
          } else {
            // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º postMessage
            res.send(`
              <html>
                <body>
                  <script>
                    window.opener.postMessage({
                      type: 'social_auth_success',
                      token: '${token}',
                      user: ${JSON.stringify(user)},
                      isNewUser: true
                    }, '${origin}');
                    window.close();
                  </script>
                </body>
              </html>
            `);
          }
          return;
        }

        if (userData.avatar) {
          console.log('üîç –°–∫–∞—á–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
          await authController.downloadAndSaveAvatar(userData.avatar, user._id);
        }

        const token = jwt.sign({ userId: user._id }, authController.getJwtSecret(), { expiresIn: '7d' });
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
        const origin = req.headers.origin || (req.headers.host && req.headers.host.includes('bugacity-docker.ru.tuna.am') 
          ? 'https://bugacity-docker.ru.tuna.am' 
          : req.headers.host && req.headers.host.includes('gluko.city')
            ? 'https://gluko.city'
            : 'https://bugacity-npm.ru.tuna.am');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–æ–±–∏–ª—å–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º
        const userAgent = req.headers['user-agent'] || '';
        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);
        
        if (isMobile) {
          // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ–∫–µ–Ω–æ–º
          res.redirect(`${origin}/?token=${token}&user=${encodeURIComponent(JSON.stringify(user))}&isNewUser=false`);
        } else {
          // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º postMessage
          res.send(`
            <html>
              <body>
                <script>
                  window.opener.postMessage({
                    type: 'social_auth_success',
                    token: '${token}',
                    user: ${JSON.stringify(user)}
                  }, '${origin}');
                  window.close();
                </script>
              </body>
            </html>
          `);
        }
      } else if (provider === 'vk') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ VK OAuth
        const userData = await authController.exchangeVKCode(code, req.headers.host);
        
        const db = req.app.locals.db;
        if (!db) {
          throw new Error('Database connection failed');
        }
        
        let user = await db.collection('users').findOne({
          email: userData.email
        });

        if (!user) {
          const numericId = await authController.generateIncrementalId(db);
          
          const result = await db.collection('users').insertOne({
            _id: numericId,
            name: userData.name,
            email: userData.email,
            username: userData.email.split('@')[0],
            glukocoins: 0,
            rewards: ['pioneer']
          });

          user = await db.collection('users').findOne({ _id: numericId });
          
          const token = jwt.sign({ userId: numericId }, authController.getJwtSecret(), { expiresIn: '7d' });
          const origin = req.headers.origin || (req.headers.host && req.headers.host.includes('bugacity-docker.ru.tuna.am') 
            ? 'https://bugacity-docker.ru.tuna.am' 
            : req.headers.host && req.headers.host.includes('gluko.city')
              ? 'https://gluko.city'
              : 'https://bugacity-npm.ru.tuna.am');
          
          res.send(`
            <html>
              <body>
                <script>
                  window.opener.postMessage({
                    type: 'social_auth_success',
                    token: '${token}',
                    user: ${JSON.stringify(user)},
                    isNewUser: true
                  }, '${origin}');
                  window.close();
                </script>
              </body>
            </html>
          `);
          return;
        }

        const token = jwt.sign({ userId: user._id }, authController.getJwtSecret(), { expiresIn: '7d' });
        const origin = req.headers.origin || 'https://bugacity-npm.ru.tuna.am';
        
        res.send(`
          <html>
            <body>
              <script>
                window.opener.postMessage({
                  type: 'social_auth_success',
                  token: '${token}',
                  user: ${JSON.stringify(user)}
                }, '${origin}');
                window.close();
              </script>
            </body>
          </html>
        `);
      } else {
        res.status(400).json({ error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä' });
      }
    } catch (error: any) {
      console.error('‚ùå OAuth callback error:', error);
      console.error('‚ùå Error details:', {
        message: error.message,
        stack: error.stack,
        code: error.code,
        name: error.name
      });
      res.status(500).json({ 
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error.message 
      });
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async deleteUser(req: any, res: any) {
    try {
      const { email } = req.body;
      const userEmail = req.user?.email; // –ü–æ–ª—É—á–∞–µ–º email –∏–∑ —Ç–æ–∫–µ–Ω–∞
      
      if (!email) {
        return res.status(400).json({ error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–±—è
      if (userEmail !== email) {
        return res.status(403).json({ 
          error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç.' 
        });
      }

      const db = req.app.locals.db;
      if (!db) {
        return res.status(500).json({ error: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞' });
      }

      // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID
      const user = await db.collection('users').findOne({ email });
      
      if (!user) {
        return res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', deletedCount: 0 });
      }

      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const result = await db.collection('users').deleteOne({ email });
      
      if (result.deletedCount > 0) {
        // –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
          const userId = user._id.toString();
          const relativePath = `users/${userId.substring(0, 8).padStart(8, '0')}/${userId}`;
          const fullPath = path.join(process.cwd(), 'uploads', relativePath);
          
          if (fs.existsSync(fullPath)) {
            fs.rmSync(fullPath, { recursive: true, force: true });
            console.log(`‚úÖ –ü–∞–ø–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω–∞: ${fullPath}`);
          }
        } catch (dirError) {
          console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', dirError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É
        }
        
        res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω', deletedCount: result.deletedCount });
      } else {
        res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', deletedCount: 0 });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  }
}

export const authController = new AuthController();
