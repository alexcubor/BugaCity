import nodemailer from 'nodemailer';

class EmailService {
  private transporter: nodemailer.Transporter;

  constructor() {
    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ –≤–∞—à SMTP —Å–µ—Ä–≤–µ—Ä
    this.transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST || 'smtp.jino.ru',
      port: parseInt(process.env.SMTP_PORT || '587'),
      secure: false, // –î–ª—è –ø–æ—Ä—Ç–∞ 587 –∏—Å–ø–æ–ª—å–∑—É–µ–º STARTTLS
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS
      }
    });
  }

  async sendVerificationEmail(email: string, code: string): Promise<void> {
    const mailOptions = {
      from: '"GlukoCity" <hello@gluko.city>', // –û—Ç –∫–æ–≥–æ
      to: email, // –ö–æ–º—É
      subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –ì–ª—é–∫–æ–≥—Ä–∞–¥', // –¢–µ–º–∞
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 10px 10px 0 0; text-align: center;">
            <h1 style="margin: 0; font-size: 28px;">üéÆ –ì–ª—é–∫–æ–≥—Ä–∞–¥</h1>
            <p style="margin: 10px 0 0 0; opacity: 0.9;">–í–æ–ª—à–µ–±—Å—Ç–≤–æ –≤ —Ç–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!</p>
          </div>
          
          <div style="background: #f8f9fa; padding: 30px; border-radius: 0 0 10px 10px;">
            <h2 style="color: #333; margin-top: 0;">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–≤–æ–π email</h2>
            
            <p style="color: #666; line-height: 1.6;">
              –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ –ì–ª—é–∫–æ–≥—Ä–∞–¥:
            </p>
            
            <div style="background: white; border: 2px solid #667eea; border-radius: 8px; padding: 25px; text-align: center; margin: 25px 0;">
              <div style="font-size: 32px; font-weight: bold; color: #667eea; letter-spacing: 8px; font-family: 'Courier New', monospace;">
                ${code}
              </div>
            </div>
            
            <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 5px; padding: 15px; margin: 20px 0;">
              <p style="margin: 0; color: #856404;">
                ‚è∞ <strong>–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç</strong>
              </p>
            </div>
            
            <p style="color: #666; font-size: 14px; margin-top: 30px;">
              –ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –ì–ª—é–∫–æ–≥—Ä–∞–¥–µ, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
            </p>
          </div>
          
          <div style="text-align: center; margin-top: 20px; padding: 20px; border-top: 1px solid #eee;">
            <p style="color: #999; font-size: 12px; margin: 0;">
              –° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
              –ö–æ–º–∞–Ω–¥–∞ GlukoCity<br>
              <a href="https://gluko.city" style="color: #667eea;">gluko.city</a>
            </p>
          </div>
        </div>
      `
    };

    try {
      await this.transporter.sendMail(mailOptions);
      console.log(`‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      throw error;
    }
  }

  // –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async testConnection(): Promise<boolean> {
    try {
      await this.transporter.verify();
      console.log('‚úÖ SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ SMTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      return false;
    }
  }
}

export const emailService = new EmailService();
